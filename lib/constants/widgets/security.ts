import { Widget } from './index'
import {
	Fingerprint,
	Key,
	Lock,
	QrCode
} from 'lucide-react'
import { JWTIcon } from '@/components/icons/JWTIcon'

export const securityWidgets: Widget[] = [
	{
			id: 'qr-generator',
			icon: QrCode,
			category: 'security',
			translationKey: 'qrGenerator',
			path: 'qr-generator',
			gradient: 'from-violet-500 to-purple-500',
			title: 'Генератор QR кодов онлайн - создать QR код бесплатно',
			description:
				'Бесплатный генератор QR кодов онлайн. Создайте QR код для URL, WiFi, App Store за секунды. Генератор qr работает без регистрации',
			useCase:
				'Бесплатный онлайн генератор qr кодов для URL, WiFi сетей, визиток и мобильных приложений',
			recommendedTools: ['utm-builder', 'svg-encoder', 'youtube-thumbnail'],
			difficulty: 'beginner',
			tags: ['qr', 'qrcode', 'generator', 'wifi', 'mobile'],
			metaDescription:
				'QR code generator for URLs, WiFi, and apps. Create customizable QR codes with colors and logos.',
			faqs: [
				{
					question: 'Что можно закодировать в QR-код?',
					answer:
						'Можно закодировать URL, текст, данные WiFi, email адреса, номера телефонов, SMS сообщения и ссылки на приложения.'
				},
				{
					question: 'Как сканировать QR-коды?',
					answer:
						'Большинство современных смартфонов могут сканировать QR-коды через встроенную камеру. Просто наведите и нажмите на уведомление.'
				},
				{
					question: 'Какова максимальная вместимость?',
					answer:
						'QR-коды могут хранить до 7089 цифр или 4296 буквенно-цифровых символов. Для лучшего сканирования используйте менее 300 символов.'
				},
				{
					question: 'Что такое уровни коррекции ошибок?',
					answer:
						'QR-коды имеют 4 уровня: L (7%), M (15%), Q (25%), H (30%). Выше уровень - больше данных восстановится при повреждении, но код становится сложнее. Для кодов с логотипами используйте H.'
				},
				{
					question: 'Можно ли изменить цвет и добавить логотип?',
					answer:
						'Да! Можно менять цвета переднего плана и фона, но сохраняйте высокий контраст. Логотип можно разместить в центре, занимая до 30% площади с высоким уровнем коррекции ошибок.'
				}
			]
		},
	{
			id: 'password-generator',
			icon: Key,
			category: 'security',
			translationKey: 'passwordGenerator',
			path: 'password-generator',
			gradient: 'from-emerald-500 to-teal-600',
			title: 'Генератор паролей онлайн',
			description:
				'Бесплатный генератор паролей онлайн. Создать пароль любой сложности. Генератор надежных паролей с анализом стойкости',
			useCase:
				'Бесплатный онлайн генератор паролей для соцсетей, почты, аккаунтов и защиты данных',
			recommendedTools: ['qr-generator', 'utm-builder', 'hash-generator'],
			difficulty: 'beginner',
			tags: ['password', 'security', 'generator', 'random', 'secure'],
			metaDescription:
				'Secure password generator. Create strong passwords with custom length and character sets.',
			faqs: [
				{
					question: 'Что делает пароль надёжным?',
					answer:
						'Надёжные пароли имеют минимум 12 символов, используют сочетание заглавных, строчных букв, цифр и символов, избегают распространённых слов или паттернов.'
				},
				{
					question: 'Как генерируются пароли?',
					answer:
						'Генератор использует криптографически безопасную генерацию случайных чисел для обеспечения истинной случайности, делая пароли крайне сложными для предсказания или взлома.'
				},
				{
					question: 'Можно ли использовать один пароль везде?',
					answer:
						'Никогда! Используйте уникальные пароли для каждого аккаунта. Рассмотрите использование менеджера паролей для безопасного хранения всех ваших паролей.'
				},
				{
					question: 'Какая оптимальная длина пароля?',
					answer:
						'Рекомендуется минимум 16 символов для критических аккаунтов (банки, почта). Для остальных - минимум 12 символов. Каждый дополнительный символ экспоненциально увеличивает время взлома.'
				},
				{
					question: 'Нужно ли регулярно менять пароли?',
					answer:
						'Современные рекомендации NIST: меняйте пароль только при подозрении на утечку. Частая смена без причины приводит к использованию слабых паролей. Важнее использовать уникальные сильные пароли для каждого сервиса.'
				}
			]
		},
	{
			id: 'base64-encoder',
			icon: Lock,
			category: 'security',
			translationKey: 'base64Encoder',
			path: 'base64-encoder',
			gradient: 'from-green-500 to-teal-600',
			title: 'Base64 кодировщик',
			description: 'Кодируйте и декодируйте данные в формате Base64',
			recommendedTools: ['jwt-decoder', 'hash-generator', 'json-tools'],
			difficulty: 'beginner',
			tags: ['base64', 'encode', 'decode', 'converter', 'encryption'],
			useCase:
				'Кодирование изображений и файлов в Base64 для встраивания в CSS/HTML',
			metaDescription:
				'Base64 encoder/decoder with file support. Encode and decode Base64 data.',
			faqs: [
				{
					question: 'Что такое кодирование Base64 и зачем оно используется?',
					answer:
						'Base64 - это метод преобразования двоичных данных в ASCII-текст с использованием 64 символов (A-Z, a-z, 0-9, +, /). Широко используется в веб-разработке, вложениях электронной почты, data URL и API, где двоичные данные нужно передавать как текст.'
				},
				{
					question: 'Является ли кодирование Base64 безопасным?',
					answer:
						'Нет, Base64 - это НЕ шифрование или защита, это просто кодирование. Любой может легко декодировать данные Base64. Никогда не используйте его для скрытия конфиденциальной информации. Он предназначен для передачи данных, а не для безопасности.'
				},
				{
					question: 'Какие типы файлов можно кодировать?',
					answer:
						'Можно кодировать файлы любого типа: изображения (PNG, JPG), документы (PDF, DOC), текстовые файлы, исполняемые файлы и т.д. Инструмент конвертирует двоичное содержимое в текст Base64, независимо от формата файла.'
				},
				{
					question: 'Почему закодированные данные выглядят длиннее оригинала?',
					answer:
						'Кодирование Base64 увеличивает размер данных примерно на 33%, поскольку использует 4 ASCII-символа для представления каждых 3 байтов исходных данных. Эти накладные расходы - компромисс за безопасную передачу через текст.'
				},
				{
					question: 'Когда следует использовать кодирование Base64?',
					answer:
						'Используйте Base64 для встраивания небольших изображений в CSS/HTML как data URLs, кодирования двоичных данных для JSON API, подготовки загрузки файлов для веб-форм и в любых ситуациях, где нужно передавать двоичные данные через текстовые каналы.'
				}
			]
		},
	{
			id: 'jwt-decoder',
			icon: JWTIcon,
			category: 'security',
			translationKey: 'jwtDecoder',
			path: 'jwt-decoder',
			gradient: 'from-purple-500 to-pink-600',
			title: 'JWT декодер',
			description: 'Декодируйте и анализируйте JSON Web Token без ключа',
			recommendedTools: ['base64-encoder', 'json-tools', 'uuid-generator'],
			difficulty: 'intermediate',
			tags: ['jwt', 'json', 'token', 'decoder', 'authentication'],
			useCase: 'Анализ структуры JWT токенов для отладки авторизации',
			metaDescription:
				'JWT decoder and analyzer. Decode JSON Web Tokens and inspect claims.',
			faqs: [
				{
					question: 'Что такое JWT и как он структурирован?',
					answer:
						'JWT (JSON Web Token) - это безопасный способ передачи информации в виде JSON объекта. Состоит из трех частей, закодированных в Base64 и разделенных точками: Заголовок (информация об алгоритме), Полезная нагрузка (утверждения/данные) и Подпись (проверка).'
				},
				{
					question: 'Безопасно ли декодировать JWT на стороне клиента?',
					answer:
						'Да, декодирование безопасно - JWT созданы для чтения клиентами. Однако никогда не размещайте чувствительные данные в утверждениях JWT, поскольку любой может их декодировать. Подпись проверяет подлинность, но данные полезной нагрузки не зашифрованы.'
				},
				{
					question: 'Что такое утверждения JWT и как их читать?',
					answer:
						'Утверждения - это заявления о сущности (обычно пользователе). Стандартные утверждения включают "iss" (издатель), "exp" (истечение), "sub" (субъект) и "aud" (аудитория). Пользовательские утверждения могут содержать любые JSON данные, необходимые вашему приложению.'
				},
				{
					question: 'Как проверить, действителен ли JWT?',
					answer:
						'Этот инструмент только декодирует JWT - он не проверяет подписи. Для проверки действительности нужен секретный ключ или открытый ключ, использованный для подписи. Проверяйте даты истечения, издателя и другие утверждения в логике приложения.'
				},
				{
					question: 'Почему может не удаться декодирование JWT?',
					answer:
						'Частые причины: неправильная структура токена (не 3 части), недопустимое кодирование Base64, поврежденные символы или токены, которые на самом деле не являются JWT. Убедитесь, что вставляете полный токен, включая все точки.'
				}
			]
		},
	{
			id: 'uuid-generator',
			icon: Fingerprint,
			category: 'security',
			translationKey: 'uuidGenerator',
			path: 'uuid-generator',
			gradient: 'from-indigo-500 to-blue-600',
			title: 'Генератор UUID',
			description: 'Создавайте уникальные идентификаторы UUID всех версий',
			recommendedTools: ['hash-generator', 'password-generator', 'jwt-decoder'],
			difficulty: 'beginner',
			tags: ['uuid', 'guid', 'generator', 'unique', 'identifier'],
			useCase: 'Генерация уникальных идентификаторов для API и баз данных',
			metaDescription:
				'UUID generator for all versions. Generate unique identifiers (UUID/GUID).',
			faqs: [
				{
					question: 'В чём разница между версиями UUID?',
					answer:
						'UUID v1 использует временную метку + MAC адрес, v3/v5 используют хеширование на основе имени (MD5/SHA-1), v4 использует случайные данные. v4 наиболее распространён для общего использования, v1 для временно упорядоченных ID.'
				},
				{
					question: 'Действительно ли UUID уникальны и защищены от коллизий?',
					answer:
						'UUID v4 имеет крайне низкую вероятность коллизий (1 к 5.3×10^36). Хотя математически это не невозможно, коллизии практически невозможны в реальных приложениях.'
				},
				{
					question: 'Когда следует использовать UUID против автоинкрементных ID?',
					answer:
						'Используйте UUID для распределённых систем, публичных API или когда нужны непоследовательные ID для безопасности. Используйте автоинкремент для простых баз данных с одним сервером.'
				},
				{
					question: 'Можно ли использовать UUID как первичные ключи базы данных?',
					answer:
						'Да, но учитывайте влияние на производительность. UUID больше (36 символов против 4-8 байт) и непоследовательны, что может влиять на производительность индекса. UUID v1 или ULID могут быть лучше для баз данных.'
				},
				{
					question: 'Какой стандартный формат UUID?',
					answer:
						'Стандартный формат UUID: 8-4-4-4-12 шестнадцатеричных цифр: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. Некоторые системы используют варианты, такие как удаление дефисов или использование заглавных букв.'
				}
			]
		},
]
