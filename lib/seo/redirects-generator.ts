/**
 * SEO Redirects Generator
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 *
 * –¶–µ–ª—å: –ó–∞—Ö–≤–∞—Ç–∏—Ç—å 5.7M –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü:
 * - "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å" (4.1M)
 * - "–ø–æ—Å—á–∏—Ç–∞—Ç—å" (1.6M)
 */

interface RedirectMapping {
	source: string
	destination: string
	permanent: boolean
}

interface WidgetRedirect {
	path: string
	ruSynonyms: string[]
	enSynonyms: string[]
	category: 'calculator' | 'converter' | 'generator'
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const WIDGET_REDIRECTS: WidgetRedirect[] = [
	// ========== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ==========
	{
		path: 'bmi-calculator',
		ruSynonyms: ['bmi', 'imt', 'indeks-massy-tela', 'massa-tela'],
		enSynonyms: ['bmi', 'body-mass-index', 'weight-height'],
		category: 'calculator'
	},
	{
		path: 'percentage-calculator',
		ruSynonyms: ['procenty', 'procentov', 'protsenty', 'protsentov'],
		enSynonyms: ['percentage', 'percent'],
		category: 'calculator'
	},
	{
		path: 'age-calculator',
		ruSynonyms: ['vozrast', 'vozrasta', 'let', 'gody'],
		enSynonyms: ['age', 'years', 'birthday'],
		category: 'calculator'
	},
	{
		path: 'loan-calculator',
		ruSynonyms: ['kredit', 'kredita', 'zaem', 'zaima', 'ssuda'],
		enSynonyms: ['loan', 'credit', 'mortgage'],
		category: 'calculator'
	},
	{
		path: 'compound-interest-calculator',
		ruSynonyms: ['protsenty', 'vklad', 'vklada', 'deposita', 'investitsii'],
		enSynonyms: ['interest', 'investment', 'compound'],
		category: 'calculator'
	},
	{
		path: 'tip-calculator',
		ruSynonyms: ['chaevye', 'chaevyh', 'nalog-s-uslug'],
		enSynonyms: ['tip', 'gratuity', 'service'],
		category: 'calculator'
	},

	// ========== –ö–û–ù–í–ï–†–¢–ï–†–´ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ==========
	{
		path: 'currency-converter',
		ruSynonyms: ['valutu', 'valuta', 'dengi', 'kurs', 'obmen'],
		enSynonyms: ['currency', 'exchange', 'money'],
		category: 'converter'
	},
	{
		path: 'temperature-converter',
		ruSynonyms: ['temperaturu', 'temperatura', 'gradus', 'celsi'],
		enSynonyms: ['temperature', 'celsius', 'fahrenheit', 'kelvin'],
		category: 'converter'
	},
	{
		path: 'color-converter',
		ruSynonyms: ['tsvet', 'tsveta', 'palitra', 'rgb', 'hex'],
		enSynonyms: ['color', 'colour', 'rgb', 'hex'],
		category: 'converter'
	}
]

// –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
const RU_ACTION_SYNONYMS = {
	calculator: [
		'rasschitat', // "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å" - 4.1M –∑–∞–ø—Ä–æ—Å–æ–≤
		'poschitat', // "–ø–æ—Å—á–∏—Ç–∞—Ç—å" - 1.6M –∑–∞–ø—Ä–æ—Å–æ–≤
		'raschet', // "—Ä–∞—Å—á–µ—Ç" - ~500K –∑–∞–ø—Ä–æ—Å–æ–≤
		'vychislit', // "–≤—ã—á–∏—Å–ª–∏—Ç—å" - ~300K –∑–∞–ø—Ä–æ—Å–æ–≤
		'uznat' // "—É–∑–Ω–∞—Ç—å" - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
	],
	converter: [
		'konvertirovat', // "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
		'perevesti', // "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"
		'preobrazovat', // "–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å"
		'pereklyuchit' // "–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å"
	],
	generator: [
		'generirovat', // "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
		'sozdavat', // "—Å–æ–∑–¥–∞–≤–∞—Ç—å"
		'sdelat' // "—Å–¥–µ–ª–∞—Ç—å"
	]
}

// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã
const EN_ACTION_SYNONYMS = {
	calculator: ['calculate', 'compute', 'find', 'get'],
	converter: ['convert', 'transform', 'change', 'switch'],
	generator: ['generate', 'create', 'make', 'build']
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
 */
function generateWidgetRedirects(widget: WidgetRedirect): RedirectMapping[] {
	const redirects: RedirectMapping[] = []

	// –†—É—Å—Å–∫–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
	const ruActions = RU_ACTION_SYNONYMS[widget.category]
	for (const action of ruActions) {
		for (const synonym of widget.ruSynonyms) {
			redirects.push({
				source: `/${action}-${synonym}`,
				destination: `/ru/tools/${widget.path}`,
				permanent: true
			})
		}
	}

	// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
	const enActions = EN_ACTION_SYNONYMS[widget.category]
	for (const action of enActions) {
		for (const synonym of widget.enSynonyms) {
			redirects.push({
				source: `/${action}-${synonym}`,
				destination: `/en/tools/${widget.path}`,
				permanent: true
			})
		}
	}

	return redirects
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ landing-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function generateCategoryLandingRedirects(): RedirectMapping[] {
	return [
		// –†—É—Å—Å–∫–∏–µ –æ–±—â–∏–µ landing
		{ source: '/rasschitat', destination: '/ru/tools', permanent: true },
		{ source: '/poschitat', destination: '/ru/tools', permanent: true },
		{ source: '/raschet', destination: '/ru/tools', permanent: true },
		{ source: '/vychislit', destination: '/ru/tools', permanent: true },
		{ source: '/kalkulyator', destination: '/ru/tools', permanent: true },

		{ source: '/konvertirovat', destination: '/ru/tools', permanent: true },
		{ source: '/perevesti', destination: '/ru/tools', permanent: true },
		{ source: '/konverter', destination: '/ru/tools', permanent: true },

		{ source: '/generirovat', destination: '/ru/tools', permanent: true },
		{ source: '/sozdavat', destination: '/ru/tools', permanent: true },
		{ source: '/generator', destination: '/ru/tools', permanent: true },

		// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–±—â–∏–µ landing
		{ source: '/calculate', destination: '/en/tools', permanent: true },
		{ source: '/compute', destination: '/en/tools', permanent: true },
		{ source: '/calculator', destination: '/en/tools', permanent: true },

		{ source: '/convert', destination: '/en/tools', permanent: true },
		{ source: '/transform', destination: '/en/tools', permanent: true },
		{ source: '/converter', destination: '/en/tools', permanent: true },

		{ source: '/generate', destination: '/en/tools', permanent: true },
		{ source: '/create', destination: '/en/tools', permanent: true },
		{ source: '/generator', destination: '/en/tools', permanent: true },

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
		{ source: '/konkuylyator', destination: '/ru/tools', permanent: true }, // "–∫–æ–Ω–∫—É–ª—è—Ç–æ—Ä" - 25K –æ–ø–µ—á–∞—Ç–æ–∫
		{ source: '/kalkulator', destination: '/ru/tools', permanent: true }, // –¥—Ä—É–≥–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –æ–ø–µ—á–∞—Ç–∫–∞
		{ source: '/calcuilator', destination: '/en/tools', permanent: true } // –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –æ–ø–µ—á–∞—Ç–∫–∞
	]
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö SEO-—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
 */
export function generateAllSEORedirects(): RedirectMapping[] {
	const allRedirects: RedirectMapping[] = []

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
	for (const widget of WIDGET_REDIRECTS) {
		allRedirects.push(...generateWidgetRedirects(widget))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ landing —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
	allRedirects.push(...generateCategoryLandingRedirects())

	// –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	const uniqueRedirects = allRedirects.filter(
		(redirect, index, self) =>
			index === self.findIndex(r => r.source === redirect.source)
	)

	return uniqueRedirects
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
 */
export function validateRedirects(redirects: RedirectMapping[]): {
	valid: boolean
	errors: string[]
	warnings: string[]
} {
	const errors: string[] = []
	const warnings: string[] = []

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã source
	const sources = redirects.map(r => r.source)
	const duplicateSources = sources.filter(
		(source, index) => sources.indexOf(source) !== index
	)
	if (duplicateSources.length > 0) {
		errors.push(
			`Duplicate source URLs found: ${[...new Set(duplicateSources)].join(', ')}`
		)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
	for (const redirect of redirects) {
		if (redirect.source === redirect.destination) {
			errors.push(
				`Circular redirect detected: ${redirect.source} -> ${redirect.destination}`
			)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É URL (SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)
	for (const redirect of redirects) {
		if (redirect.source.length > 100) {
			warnings.push(
				`Long source URL (${redirect.source.length} chars): ${redirect.source}`
			)
		}
	}

	return {
		valid: errors.length === 0,
		errors,
		warnings
	}
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è Next.js config
 */
export const SEO_REDIRECTS = generateAllSEORedirects()

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
if (process.env.NODE_ENV === 'development') {
	console.log(
		`\nüöÄ SEO Redirects Generated: ${SEO_REDIRECTS.length} total redirects`
	)
	console.log(`üìä Expected traffic capture: ~5.7M searches/month`)
	console.log(
		`üéØ High-frequency targets: "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å" (4.1M) + "–ø–æ—Å—á–∏—Ç–∞—Ç—å" (1.6M)`
	)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	const validation = validateRedirects(SEO_REDIRECTS)
	if (!validation.valid) {
		console.error('‚ùå Redirect validation failed:', validation.errors)
	} else if (validation.warnings.length > 0) {
		console.warn('‚ö†Ô∏è Redirect warnings:', validation.warnings)
	} else {
		console.log('‚úÖ All redirects validated successfully')
	}
}
