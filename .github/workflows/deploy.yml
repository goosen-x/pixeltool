name: Deploy to Server

on:
  push:
    branches: [main, dev]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_YANDEX_METRIKA_ID: ${{ secrets.NEXT_PUBLIC_YANDEX_METRIKA_ID }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: NEXT_PUBLIC_SUPABASE_URL,NEXT_PUBLIC_SUPABASE_ANON_KEY,DATABASE_URL,NEXT_PUBLIC_YANDEX_METRIKA_ID,REGISTRY,IMAGE_NAME
          script: |
            # Create app directory if it doesn't exist
            mkdir -p /opt/pixeltool
            cd /opt/pixeltool
            
            # Create .env.production if it doesn't exist
            if [ ! -f .env.production ]; then
              echo "Creating .env.production file..."
              cat > .env.production << 'ENVEOF'
            # Production environment variables
            NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
            DATABASE_URL=${DATABASE_URL}
            NEXT_PUBLIC_YANDEX_METRIKA_ID=${NEXT_PUBLIC_YANDEX_METRIKA_ID}
            NEXT_PUBLIC_SITE_URL=https://pixeltool.pro
            NODE_ENV=production
            ENVEOF
              echo "Created .env.production file"
            fi
            
            # Pull latest image
            docker pull ${REGISTRY}/${IMAGE_NAME}:latest

            # Stop existing container
            docker stop pixeltool || true
            docker rm pixeltool || true

            # Start new container
            docker run -d \
              --name pixeltool \
              --restart unless-stopped \
              --env-file /opt/pixeltool/.env.production \
              -p 3000:3000 \
              ${REGISTRY}/${IMAGE_NAME}:latest
              
            # Check if container is running
            if docker ps | grep -q pixeltool; then
              echo "Deployment successful! Container is running."
            else
              echo "Deployment failed! Container is not running."
              docker logs pixeltool
              exit 1
            fi
