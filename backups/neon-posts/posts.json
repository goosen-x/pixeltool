[
  {
    "id": 30,
    "slug": "live-code-demo",
    "title": "Interactive Code Examples: Live Preview Demo",
    "excerpt": "See how our new live code preview feature works with interactive HTML, CSS, and JavaScript examples you can edit and run in real-time.",
    "content": "\nThis post demonstrates our new live code preview feature. You can now include interactive code examples that readers can see in action!\n\n## Simple Button Example\n\nLet's start with a simple interactive button:\n\n```html:live\n// title: Interactive Button\n<div class=\"container\">\n  <h2>Click the button!</h2>\n  <button onclick=\"handleClick()\">Click Me!</button>\n  <p id=\"message\"></p>\n</div>\n```\n\n```css:live\n.container {\n  text-align: center;\n  padding: 2rem;\n  background: #f0f0f0;\n  border-radius: 8px;\n}\n\nbutton {\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background 0.3s;\n}\n\nbutton:hover {\n  background: #2980b9;\n}\n\n#message {\n  margin-top: 1rem;\n  font-weight: bold;\n  color: #27ae60;\n}\n```\n\n```js:live\nlet clickCount = 0;\n\nfunction handleClick() {\n  clickCount++;\n  document.getElementById('message').textContent = \n    `Button clicked ${clickCount} time${clickCount !== 1 ? 's' : ''}!`;\n}\n```\n\n## Animated Card Example\n\nHere's a more complex example with CSS animations:\n\n```html:live\n// title: Animated Card\n<div class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"avatar\"></div>\n    <h3>John Doe</h3>\n  </div>\n  <div class=\"card-body\">\n    <p>Hover over this card to see the animation effect!</p>\n  </div>\n</div>\n```\n\n```css:live\n.card {\n  width: 300px;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);\n}\n\n.card-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 1.5rem;\n  text-align: center;\n}\n\n.avatar {\n  width: 60px;\n  height: 60px;\n  background: white;\n  border-radius: 50%;\n  margin: 0 auto 1rem;\n  position: relative;\n  overflow: hidden;\n}\n\n.avatar::after {\n  content: \"👤\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card h3 {\n  margin: 0;\n}\n```\n\n## Dynamic Color Picker\n\nAn interactive color picker example:\n\n```html:live\n// title: Color Picker Demo\n<div class=\"color-picker\">\n  <h3>Pick a Color</h3>\n  <input type=\"color\" id=\"colorInput\" value=\"#3498db\" onchange=\"changeColor()\">\n  <div class=\"color-display\" id=\"colorDisplay\">\n    <p>Selected Color</p>\n    <code id=\"colorCode\">#3498db</code>\n  </div>\n</div>\n```\n\n```css:live\n.color-picker {\n  text-align: center;\n  padding: 2rem;\n  background: #f8f9fa;\n  border-radius: 8px;\n}\n\n#colorInput {\n  width: 100px;\n  height: 50px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin: 1rem 0;\n}\n\n.color-display {\n  margin-top: 1rem;\n  padding: 2rem;\n  border-radius: 8px;\n  transition: background-color 0.3s ease;\n  color: white;\n  background-color: #3498db;\n}\n\n.color-display code {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 1.2rem;\n  background: rgba(0, 0, 0, 0.2);\n  padding: 0.5rem;\n  border-radius: 4px;\n}\n```\n\n```js:live\nfunction changeColor() {\n  const color = document.getElementById('colorInput').value;\n  const display = document.getElementById('colorDisplay');\n  const code = document.getElementById('colorCode');\n  \n  display.style.backgroundColor = color;\n  code.textContent = color;\n  \n  // Adjust text color based on background\n  const rgb = hexToRgb(color);\n  const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  display.style.color = brightness > 128 ? '#000' : '#fff';\n}\n\nfunction hexToRgb(hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n```\n\n## How It Works\n\nTo create these live examples in your markdown files, use the special `:live` suffix:\n\n- `html:live` for HTML code\n- `css:live` for CSS code  \n- `js:live` for JavaScript code\n\nThe code blocks are automatically combined into an interactive preview that readers can experiment with!\n\n## Regular Code Still Works\n\nOf course, regular code blocks still work as expected:\n\n```javascript\n// This is a regular code block\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(10)); // 55\n```\n\nThis feature makes technical blog posts much more engaging and helps readers understand concepts through hands-on experimentation!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-10T19:33:17.636Z",
    "updated_at": "2025-08-10T19:33:17.636Z",
    "published_at": "2025-08-10T19:33:17.282Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 24,
    "slug": "css-clamp-complete-guide-2025-ru",
    "title": "Полное руководство по CSS Clamp() в 2025: создаём адаптивную типографику без медиа-запросов",
    "excerpt": "Узнайте, как использовать CSS функцию clamp() для создания плавной адаптивной типографики и отступов. Практические примеры, калькулятор и лучшие практики.",
    "content": "\nCSS функция `clamp()` революционизировала подход к созданию адаптивного дизайна. В этом руководстве мы подробно разберём, как использовать эту мощную функцию для создания плавной, адаптивной типографики без единого медиа-запроса.\n\n## Что такое CSS Clamp()?\n\nФункция `clamp()` позволяет установить значение, которое адаптируется в заданном диапазоне. Синтаксис:\n\n```css\nclamp(минимум, предпочтительное, максимум)\n```\n\n### Как это работает:\n- **Минимум**: наименьшее допустимое значение\n- **Предпочтительное**: динамическое значение (обычно с vw)\n- **Максимум**: наибольшее допустимое значение\n\n## Практические примеры\n\n### 1. Адаптивные заголовки\n\n```css\nh1 {\n  font-size: clamp(2rem, 5vw, 4rem);\n}\n```\n\nЭтот заголовок:\n- Не будет меньше 32px (2rem)\n- Масштабируется с шириной экрана\n- Не превысит 64px (4rem)\n\n### 2. Плавные отступы\n\n```css\n.container {\n  padding: clamp(1rem, 3vw, 3rem);\n}\n```\n\n### 3. Адаптивная ширина контейнера\n\n```css\n.content {\n  width: clamp(300px, 90%, 1200px);\n}\n```\n\n## Формула для идеального clamp()\n\nДля расчёта оптимальных значений используйте формулу:\n\n```\nпредпочтительное = минимум + (максимум - минимум) × (100vw - минимальный_viewport) / (максимальный_viewport - минимальный_viewport)\n```\n\n### Пример расчёта:\n- Минимальный размер: 16px при 320px viewport\n- Максимальный размер: 24px при 1200px viewport\n\n```css\nfont-size: clamp(1rem, 0.909rem + 0.909vw, 1.5rem);\n```\n\n## Преимущества использования clamp()\n\n### 1. Меньше кода\nВместо множества медиа-запросов:\n```css\n/* Старый подход */\np { font-size: 16px; }\n@media (min-width: 768px) { p { font-size: 18px; } }\n@media (min-width: 1024px) { p { font-size: 20px; } }\n@media (min-width: 1440px) { p { font-size: 22px; } }\n\n/* С clamp() */\np { font-size: clamp(1rem, 0.875rem + 0.625vw, 1.375rem); }\n```\n\n### 2. Плавные переходы\nРазмеры изменяются постепенно, без резких скачков при смене брейкпоинтов.\n\n### 3. Лучшая производительность\nБраузер выполняет меньше вычислений при изменении размера окна.\n\n## Лучшие практики\n\n### 1. Используйте относительные единицы\n```css\n/* Хорошо */\nclamp(1rem, 2vw + 0.5rem, 2rem)\n\n/* Избегайте */\nclamp(16px, 2vw + 8px, 32px)\n```\n\n### 2. Тестируйте на разных устройствах\nПроверяйте, как выглядят размеры на:\n- Мобильных (320-414px)\n- Планшетах (768-1024px)\n- Десктопах (1280px+)\n\n### 3. Комбинируйте с CSS переменными\n```css\n:root {\n  --min-size: 1rem;\n  --max-size: 2.5rem;\n  --fluid-size: 1.5vw + 0.5rem;\n}\n\nh2 {\n  font-size: clamp(var(--min-size), var(--fluid-size), var(--max-size));\n}\n```\n\n## Инструменты для работы с clamp()\n\n### CSS Clamp Calculator\nИспользуйте наш [калькулятор CSS Clamp](/ru/projects/clamp-calculator) для быстрого расчёта значений:\n- Визуальный предпросмотр\n- Мгновенные вычисления\n- Копирование готового кода\n\n## Поддержка браузерами\n\nCSS `clamp()` поддерживается всеми современными браузерами:\n- Chrome 79+\n- Firefox 75+\n- Safari 13.1+\n- Edge 79+\n\nДля старых браузеров используйте fallback:\n```css\n.text {\n  font-size: 1.125rem; /* Fallback */\n  font-size: clamp(1rem, 1vw + 0.875rem, 1.5rem);\n}\n```\n\n## Распространённые ошибки\n\n### 1. Неправильный порядок значений\n```css\n/* Неправильно: максимум меньше минимума */\nclamp(2rem, 5vw, 1rem)\n\n/* Правильно */\nclamp(1rem, 5vw, 2rem)\n```\n\n### 2. Слишком большой диапазон\n```css\n/* Избегайте экстремальных значений */\nclamp(0.5rem, 10vw, 5rem) /* Слишком большой разброс */\n\n/* Лучше */\nclamp(1rem, 2vw + 0.5rem, 1.5rem)\n```\n\n### 3. Использование только vw\n```css\n/* Проблема: на больших экранах слишком большой размер */\nclamp(1rem, 5vw, 3rem)\n\n/* Решение: добавьте базовое значение */\nclamp(1rem, 2vw + 0.75rem, 3rem)\n```\n\n## Продвинутые техники\n\n### 1. Нелинейное масштабирование\n```css\n/* Используйте calc() для сложных формул */\nfont-size: clamp(\n  1rem,\n  calc(1rem + 2 * ((100vw - 20rem) / 60)),\n  2rem\n);\n```\n\n### 2. Адаптивная сетка\n```css\n.grid {\n  display: grid;\n  gap: clamp(1rem, 2vw, 2rem);\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(clamp(250px, 30%, 350px), 1fr)\n  );\n}\n```\n\n### 3. Анимированные значения\n```css\n@keyframes grow {\n  from { width: clamp(100px, 20vw, 200px); }\n  to { width: clamp(200px, 40vw, 400px); }\n}\n```\n\n## Заключение\n\nCSS `clamp()` — это мощный инструмент для создания по-настоящему адаптивного дизайна. Он упрощает код, улучшает производительность и обеспечивает плавное масштабирование элементов.\n\n### Ключевые выводы:\n1. Используйте `clamp()` для типографики и отступов\n2. Комбинируйте с относительными единицами\n3. Тестируйте на разных размерах экрана\n4. Применяйте наш [калькулятор](/ru/projects/clamp-calculator) для точных расчётов\n\nНачните использовать `clamp()` уже сегодня и сделайте ваш дизайн более гибким и современным!\n\n## Полезные ресурсы\n\n- [CSS Clamp Calculator](/ru/projects/clamp-calculator) — наш инструмент для расчётов\n- [MDN: clamp()](https://developer.mozilla.org/ru/docs/Web/CSS/clamp)\n- [Fluid Typography Calculator](https://www.fluid-type-scale.com/)\n- [Modern Fluid Typography Using CSS Clamp](https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/)\n\n---\n\n*Понравилась статья? Попробуйте наш [CSS Clamp Calculator](/ru/projects/clamp-calculator) для создания адаптивной типографики в ваших проектах!*",
    "cover_image": "/assets/blog/css-clamp-guide/cover.jpg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-10T19:33:15.986Z",
    "updated_at": "2025-08-10T19:33:15.986Z",
    "published_at": "2025-08-10T19:33:15.656Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 23,
    "slug": "css-clamp-complete-guide-2025-en",
    "title": "The Complete Guide to CSS Clamp() in 2025: Fluid Typography Without Media Queries",
    "excerpt": "Learn how to use the CSS clamp() function to create smooth, responsive typography and spacing. Practical examples, calculator, and best practices included.",
    "content": "\nThe CSS `clamp()` function has revolutionized responsive design. In this comprehensive guide, we'll explore how to use this powerful function to create fluid, responsive typography without a single media query.\n\n## What is CSS Clamp()?\n\nThe `clamp()` function lets you set a value that adapts within a defined range. The syntax is:\n\n```css\nclamp(minimum, preferred, maximum)\n```\n\n### How it works:\n- **Minimum**: The smallest allowed value\n- **Preferred**: Dynamic value (usually with vw units)\n- **Maximum**: The largest allowed value\n\n## Practical Examples\n\n### 1. Responsive Headings\n\n```css\nh1 {\n  font-size: clamp(2rem, 5vw, 4rem);\n}\n```\n\nThis heading:\n- Won't be smaller than 32px (2rem)\n- Scales with viewport width\n- Won't exceed 64px (4rem)\n\n### 2. Fluid Spacing\n\n```css\n.container {\n  padding: clamp(1rem, 3vw, 3rem);\n}\n```\n\n### 3. Adaptive Container Width\n\n```css\n.content {\n  width: clamp(300px, 90%, 1200px);\n}\n```\n\n## The Perfect Clamp() Formula\n\nTo calculate optimal values, use this formula:\n\n```\npreferred = min + (max - min) × (100vw - min_viewport) / (max_viewport - min_viewport)\n```\n\n### Example calculation:\n- Minimum size: 16px at 320px viewport\n- Maximum size: 24px at 1200px viewport\n\n```css\nfont-size: clamp(1rem, 0.909rem + 0.909vw, 1.5rem);\n```\n\n## Benefits of Using Clamp()\n\n### 1. Less Code\nInstead of multiple media queries:\n```css\n/* Old approach */\np { font-size: 16px; }\n@media (min-width: 768px) { p { font-size: 18px; } }\n@media (min-width: 1024px) { p { font-size: 20px; } }\n@media (min-width: 1440px) { p { font-size: 22px; } }\n\n/* With clamp() */\np { font-size: clamp(1rem, 0.875rem + 0.625vw, 1.375rem); }\n```\n\n### 2. Smooth Transitions\nSizes change gradually without jarring jumps at breakpoints.\n\n### 3. Better Performance\nThe browser performs fewer calculations when resizing.\n\n## Best Practices\n\n### 1. Use Relative Units\n```css\n/* Good */\nclamp(1rem, 2vw + 0.5rem, 2rem)\n\n/* Avoid */\nclamp(16px, 2vw + 8px, 32px)\n```\n\n### 2. Test Across Devices\nCheck how sizes look on:\n- Mobile (320-414px)\n- Tablet (768-1024px)\n- Desktop (1280px+)\n\n### 3. Combine with CSS Variables\n```css\n:root {\n  --min-size: 1rem;\n  --max-size: 2.5rem;\n  --fluid-size: 1.5vw + 0.5rem;\n}\n\nh2 {\n  font-size: clamp(var(--min-size), var(--fluid-size), var(--max-size));\n}\n```\n\n## Tools for Working with Clamp()\n\n### CSS Clamp Calculator\nUse our [CSS Clamp Calculator](/en/projects/clamp-calculator) for quick calculations:\n- Visual preview\n- Instant calculations\n- Copy ready-to-use code\n\n## Browser Support\n\nCSS `clamp()` is supported by all modern browsers:\n- Chrome 79+\n- Firefox 75+\n- Safari 13.1+\n- Edge 79+\n\nFor older browsers, use a fallback:\n```css\n.text {\n  font-size: 1.125rem; /* Fallback */\n  font-size: clamp(1rem, 1vw + 0.875rem, 1.5rem);\n}\n```\n\n## Common Mistakes\n\n### 1. Wrong Value Order\n```css\n/* Wrong: maximum is less than minimum */\nclamp(2rem, 5vw, 1rem)\n\n/* Correct */\nclamp(1rem, 5vw, 2rem)\n```\n\n### 2. Too Large Range\n```css\n/* Avoid extreme values */\nclamp(0.5rem, 10vw, 5rem) /* Too much variance */\n\n/* Better */\nclamp(1rem, 2vw + 0.5rem, 1.5rem)\n```\n\n### 3. Using Only vw Units\n```css\n/* Problem: too large on wide screens */\nclamp(1rem, 5vw, 3rem)\n\n/* Solution: add a base value */\nclamp(1rem, 2vw + 0.75rem, 3rem)\n```\n\n## Advanced Techniques\n\n### 1. Non-linear Scaling\n```css\n/* Use calc() for complex formulas */\nfont-size: clamp(\n  1rem,\n  calc(1rem + 2 * ((100vw - 20rem) / 60)),\n  2rem\n);\n```\n\n### 2. Responsive Grid\n```css\n.grid {\n  display: grid;\n  gap: clamp(1rem, 2vw, 2rem);\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(clamp(250px, 30%, 350px), 1fr)\n  );\n}\n```\n\n### 3. Animated Values\n```css\n@keyframes grow {\n  from { width: clamp(100px, 20vw, 200px); }\n  to { width: clamp(200px, 40vw, 400px); }\n}\n```\n\n## Real-World Use Cases\n\n### 1. Typography System\n```css\n:root {\n  --text-xs: clamp(0.75rem, 0.7rem + 0.25vw, 0.875rem);\n  --text-sm: clamp(0.875rem, 0.8rem + 0.375vw, 1rem);\n  --text-base: clamp(1rem, 0.9rem + 0.5vw, 1.125rem);\n  --text-lg: clamp(1.125rem, 1rem + 0.625vw, 1.25rem);\n  --text-xl: clamp(1.25rem, 1.1rem + 0.75vw, 1.5rem);\n  --text-2xl: clamp(1.5rem, 1.25rem + 1.25vw, 2rem);\n  --text-3xl: clamp(2rem, 1.5rem + 2.5vw, 3rem);\n}\n```\n\n### 2. Spacing Scale\n```css\n:root {\n  --space-xs: clamp(0.25rem, 0.2rem + 0.25vw, 0.5rem);\n  --space-sm: clamp(0.5rem, 0.4rem + 0.5vw, 0.75rem);\n  --space-md: clamp(1rem, 0.8rem + 1vw, 1.5rem);\n  --space-lg: clamp(1.5rem, 1.2rem + 1.5vw, 2.25rem);\n  --space-xl: clamp(2rem, 1.6rem + 2vw, 3rem);\n}\n```\n\n## Performance Considerations\n\n### 1. Minimize Calculations\n```css\n/* Less performant */\nfont-size: clamp(\n  calc(16px + 2vw),\n  calc(20px + 5vw),\n  calc(32px + 3vw)\n);\n\n/* More performant */\nfont-size: clamp(1rem, 1.25rem + 2vw, 2rem);\n```\n\n### 2. Use CSS Variables for Repeated Values\n```css\n:root {\n  --fluid-type-min: 1rem;\n  --fluid-type-max: 1.5rem;\n  --fluid-type-target: 2vw + 0.5rem;\n}\n\n.text {\n  font-size: clamp(\n    var(--fluid-type-min),\n    var(--fluid-type-target),\n    var(--fluid-type-max)\n  );\n}\n```\n\n## Debugging Tips\n\n### 1. Visualize the Range\nUse CSS custom properties to debug:\n```css\n.debug {\n  --min: 1rem;\n  --preferred: 2vw + 0.5rem;\n  --max: 2rem;\n  \n  font-size: var(--min); /* Test minimum */\n  font-size: var(--preferred); /* Test scaling */\n  font-size: var(--max); /* Test maximum */\n  font-size: clamp(var(--min), var(--preferred), var(--max));\n}\n```\n\n### 2. Browser DevTools\n- Use responsive mode to test different viewports\n- Inspect computed values\n- Watch how values change during resize\n\n## Conclusion\n\nCSS `clamp()` is a powerful tool for creating truly responsive designs. It simplifies code, improves performance, and ensures smooth scaling of elements.\n\n### Key Takeaways:\n1. Use `clamp()` for typography and spacing\n2. Combine with relative units for best results\n3. Test across different screen sizes\n4. Use our [calculator](/en/projects/clamp-calculator) for precise calculations\n\nStart using `clamp()` today and make your designs more flexible and modern!\n\n## Useful Resources\n\n- [CSS Clamp Calculator](/en/projects/clamp-calculator) — Our calculation tool\n- [MDN: clamp()](https://developer.mozilla.org/en-US/docs/Web/CSS/clamp)\n- [Fluid Typography Calculator](https://www.fluid-type-scale.com/)\n- [Modern Fluid Typography Using CSS Clamp](https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/)\n\n---\n\n*Enjoyed this article? Try our [CSS Clamp Calculator](/en/projects/clamp-calculator) to create fluid typography in your projects!*",
    "cover_image": "/assets/blog/css-clamp-guide/cover.jpg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-10T19:33:15.432Z",
    "updated_at": "2025-08-10T19:33:15.432Z",
    "published_at": "2025-08-10T19:33:15.120Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 21,
    "slug": "interactive-code-examples-live-preview-demo",
    "title": "Интерактивные примеры кода: демонстрация живого превью",
    "excerpt": "Посмотрите, как работает наша новая функция предварительного просмотра кода с интерактивными примерами HTML, CSS и JavaScript, которые можно редактировать и запускать в реальном времени.",
    "content": "---\ntitle: \"Interactive Code Examples: Live Preview Demo\"\nexcerpt: \"See how our new live code preview feature works with interactive HTML, CSS, and JavaScript examples you can edit and run in real-time.\"\ncoverImage: \"/images/avatar.jpeg\"\ndate: \"2025-08-07T10:00:00.000Z\"\nauthor:\n  name: Dmitry Borisenko\n  picture: \"/images/avatar.jpeg\"\nogImage:\n  url: \"/images/avatar.jpeg\"\n---\n\nThis post demonstrates our new live code preview feature. You can now include interactive code examples that readers can see in action!\n\n## Simple Button Example\n\nLet's start with a simple interactive button:\n\n```html:live\n// title: Interactive Button\n<div class=\"container\">\n  <h2>Click the button!</h2>\n  <button onclick=\"handleClick()\">Click Me!</button>\n  <p id=\"message\"></p>\n</div>\n```\n\n```css:live\n.container {\n  text-align: center;\n  padding: 2rem;\n  background: #f0f0f0;\n  border-radius: 8px;\n}\n\nbutton {\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background 0.3s;\n}\n\nbutton:hover {\n  background: #2980b9;\n}\n\n#message {\n  margin-top: 1rem;\n  font-weight: bold;\n  color: #27ae60;\n}\n```\n\n```js:live\nlet clickCount = 0;\n\nfunction handleClick() {\n  clickCount++;\n  document.getElementById('message').textContent = \n    `Button clicked ${clickCount} time${clickCount !== 1 ? 's' : ''}!`;\n}\n```\n\n## Animated Card Example\n\nHere's a more complex example with CSS animations:\n\n```html:live\n// title: Animated Card\n<div class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"avatar\"></div>\n    <h3>John Doe</h3>\n  </div>\n  <div class=\"card-body\">\n    <p>Hover over this card to see the animation effect!</p>\n  </div>\n</div>\n```\n\n```css:live\n.card {\n  width: 300px;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);\n}\n\n.card-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 1.5rem;\n  text-align: center;\n}\n\n.avatar {\n  width: 60px;\n  height: 60px;\n  background: white;\n  border-radius: 50%;\n  margin: 0 auto 1rem;\n  position: relative;\n  overflow: hidden;\n}\n\n.avatar::after {\n  content: \"👤\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card h3 {\n  margin: 0;\n}\n```\n\n## Dynamic Color Picker\n\nAn interactive color picker example:\n\n```html:live\n// title: Color Picker Demo\n<div class=\"color-picker\">\n  <h3>Pick a Color</h3>\n  <input type=\"color\" id=\"colorInput\" value=\"#3498db\" onchange=\"changeColor()\">\n  <div class=\"color-display\" id=\"colorDisplay\">\n    <p>Selected Color</p>\n    <code id=\"colorCode\">#3498db</code>\n  </div>\n</div>\n```\n\n```css:live\n.color-picker {\n  text-align: center;\n  padding: 2rem;\n  background: #f8f9fa;\n  border-radius: 8px;\n}\n\n#colorInput {\n  width: 100px;\n  height: 50px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin: 1rem 0;\n}\n\n.color-display {\n  margin-top: 1rem;\n  padding: 2rem;\n  border-radius: 8px;\n  transition: background-color 0.3s ease;\n  color: white;\n  background-color: #3498db;\n}\n\n.color-display code {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 1.2rem;\n  background: rgba(0, 0, 0, 0.2);\n  padding: 0.5rem;\n  border-radius: 4px;\n}\n```\n\n```js:live\nfunction changeColor() {\n  const color = document.getElementById('colorInput').value;\n  const display = document.getElementById('colorDisplay');\n  const code = document.getElementById('colorCode');\n  \n  display.style.backgroundColor = color;\n  code.textContent = color;\n  \n  // Adjust text color based on background\n  const rgb = hexToRgb(color);\n  const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  display.style.color = brightness > 128 ? '#000' : '#fff';\n}\n\nfunction hexToRgb(hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n```\n\n## How It Works\n\nTo create these live examples in your markdown files, use the special `:live` suffix:\n\n- `html:live` for HTML code\n- `css:live` for CSS code  \n- `js:live` for JavaScript code\n\nThe code blocks are automatically combined into an interactive preview that readers can experiment with!\n\n## Regular Code Still Works\n\nOf course, regular code blocks still work as expected:\n\n```javascript\n// This is a regular code block\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(10)); // 55\n```\n\nThis feature makes technical blog posts much more engaging and helps readers understand concepts through hands-on experimentation!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T20:03:01.079Z",
    "updated_at": "2025-08-07T20:03:01.079Z",
    "published_at": "2025-08-07T20:03:00.959Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 20,
    "slug": "interactive-code-examples-live-preview-demo",
    "title": "Interactive Code Examples: Live Preview Demo",
    "excerpt": "See how our new live code preview feature works with interactive HTML, CSS, and JavaScript examples you can edit and run in real-time.",
    "content": "---\ntitle: \"Interactive Code Examples: Live Preview Demo\"\nexcerpt: \"See how our new live code preview feature works with interactive HTML, CSS, and JavaScript examples you can edit and run in real-time.\"\ncoverImage: \"/images/avatar.jpeg\"\ndate: \"2025-08-07T10:00:00.000Z\"\nauthor:\n  name: Dmitry Borisenko\n  picture: \"/images/avatar.jpeg\"\nogImage:\n  url: \"/images/avatar.jpeg\"\n---\n\nThis post demonstrates our new live code preview feature. You can now include interactive code examples that readers can see in action!\n\n## Simple Button Example\n\nLet's start with a simple interactive button:\n\n```html:live\n// title: Interactive Button\n<div class=\"container\">\n  <h2>Click the button!</h2>\n  <button onclick=\"handleClick()\">Click Me!</button>\n  <p id=\"message\"></p>\n</div>\n```\n\n```css:live\n.container {\n  text-align: center;\n  padding: 2rem;\n  background: #f0f0f0;\n  border-radius: 8px;\n}\n\nbutton {\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background 0.3s;\n}\n\nbutton:hover {\n  background: #2980b9;\n}\n\n#message {\n  margin-top: 1rem;\n  font-weight: bold;\n  color: #27ae60;\n}\n```\n\n```js:live\nlet clickCount = 0;\n\nfunction handleClick() {\n  clickCount++;\n  document.getElementById('message').textContent = \n    `Button clicked ${clickCount} time${clickCount !== 1 ? 's' : ''}!`;\n}\n```\n\n## Animated Card Example\n\nHere's a more complex example with CSS animations:\n\n```html:live\n// title: Animated Card\n<div class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"avatar\"></div>\n    <h3>John Doe</h3>\n  </div>\n  <div class=\"card-body\">\n    <p>Hover over this card to see the animation effect!</p>\n  </div>\n</div>\n```\n\n```css:live\n.card {\n  width: 300px;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);\n}\n\n.card-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 1.5rem;\n  text-align: center;\n}\n\n.avatar {\n  width: 60px;\n  height: 60px;\n  background: white;\n  border-radius: 50%;\n  margin: 0 auto 1rem;\n  position: relative;\n  overflow: hidden;\n}\n\n.avatar::after {\n  content: \"👤\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card h3 {\n  margin: 0;\n}\n```\n\n## Dynamic Color Picker\n\nAn interactive color picker example:\n\n```html:live\n// title: Color Picker Demo\n<div class=\"color-picker\">\n  <h3>Pick a Color</h3>\n  <input type=\"color\" id=\"colorInput\" value=\"#3498db\" onchange=\"changeColor()\">\n  <div class=\"color-display\" id=\"colorDisplay\">\n    <p>Selected Color</p>\n    <code id=\"colorCode\">#3498db</code>\n  </div>\n</div>\n```\n\n```css:live\n.color-picker {\n  text-align: center;\n  padding: 2rem;\n  background: #f8f9fa;\n  border-radius: 8px;\n}\n\n#colorInput {\n  width: 100px;\n  height: 50px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin: 1rem 0;\n}\n\n.color-display {\n  margin-top: 1rem;\n  padding: 2rem;\n  border-radius: 8px;\n  transition: background-color 0.3s ease;\n  color: white;\n  background-color: #3498db;\n}\n\n.color-display code {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 1.2rem;\n  background: rgba(0, 0, 0, 0.2);\n  padding: 0.5rem;\n  border-radius: 4px;\n}\n```\n\n```js:live\nfunction changeColor() {\n  const color = document.getElementById('colorInput').value;\n  const display = document.getElementById('colorDisplay');\n  const code = document.getElementById('colorCode');\n  \n  display.style.backgroundColor = color;\n  code.textContent = color;\n  \n  // Adjust text color based on background\n  const rgb = hexToRgb(color);\n  const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  display.style.color = brightness > 128 ? '#000' : '#fff';\n}\n\nfunction hexToRgb(hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n```\n\n## How It Works\n\nTo create these live examples in your markdown files, use the special `:live` suffix:\n\n- `html:live` for HTML code\n- `css:live` for CSS code  \n- `js:live` for JavaScript code\n\nThe code blocks are automatically combined into an interactive preview that readers can experiment with!\n\n## Regular Code Still Works\n\nOf course, regular code blocks still work as expected:\n\n```javascript\n// This is a regular code block\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(10)); // 55\n```\n\nThis feature makes technical blog posts much more engaging and helps readers understand concepts through hands-on experimentation!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-07T20:03:00.193Z",
    "updated_at": "2025-08-07T20:03:00.193Z",
    "published_at": "2025-08-07T20:02:59.680Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 19,
    "slug": "css-variables",
    "title": "CSS Переменные (Custom Properties): Динамическая Стилизация",
    "excerpt": "Освойте CSS custom properties для динамической и поддерживаемой стилизации. Изучите область видимости, наследование, резервные значения и интеграцию с JavaScript.",
    "content": "# CSS Переменные (Custom Properties): Динамическая Стилизация\n\nCSS переменные (custom properties) привносят динамичность в CSS, позволяя создавать гибкие и легко настраиваемые стили.\n\n## Основы CSS переменных\n\n### Объявление и использование\n\n```css\n:root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --spacing-unit: 1rem;\n  --border-radius: 4px;\n}\n\n.button {\n  background: var(--primary-color);\n  padding: var(--spacing-unit);\n  border-radius: var(--border-radius);\n}\n```\n\n### Резервные значения\n\n```css\n.element {\n  /* Резервное значение, если переменная не определена */\n  color: var(--text-color, #333);\n  \n  /* Множественные резервы */\n  background: var(--bg-color, var(--fallback-bg, white));\n}\n```\n\n## Область видимости и наследование\n\n### Локальные переменные\n\n```css\n.card {\n  --card-padding: 2rem;\n  --card-bg: #f5f5f5;\n  \n  padding: var(--card-padding);\n  background: var(--card-bg);\n}\n\n.card.compact {\n  --card-padding: 1rem;\n}\n```\n\n### Каскадирование\n\n```css\n:root {\n  --text-size: 16px;\n}\n\n.large-text {\n  --text-size: 20px;\n}\n\np {\n  font-size: var(--text-size);\n}\n```\n\n## Практические примеры\n\n### Темы оформления\n\n```css\n/* Светлая тема (по умолчанию) */\n:root {\n  --bg-color: white;\n  --text-color: #333;\n  --border-color: #ddd;\n}\n\n/* Тёмная тема */\n[data-theme=\"dark\"] {\n  --bg-color: #1a1a1a;\n  --text-color: #f0f0f0;\n  --border-color: #444;\n}\n\n/* Применение */\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n}\n\n.card {\n  border: 1px solid var(--border-color);\n}\n```\n\n### Адаптивная типографика\n\n```css\n:root {\n  --base-font: 16px;\n  --scale-ratio: 1.25;\n  \n  --text-xs: calc(var(--base-font) / var(--scale-ratio));\n  --text-sm: var(--base-font);\n  --text-md: calc(var(--base-font) * var(--scale-ratio));\n  --text-lg: calc(var(--base-font) * var(--scale-ratio) * var(--scale-ratio));\n}\n\nh1 { font-size: var(--text-lg); }\nh2 { font-size: var(--text-md); }\np { font-size: var(--text-sm); }\nsmall { font-size: var(--text-xs); }\n```\n\n## Интеграция с JavaScript\n\n### Чтение переменных\n\n```javascript\n// Получить значение переменной\nconst rootStyles = getComputedStyle(document.documentElement);\nconst primaryColor = rootStyles.getPropertyValue('--primary-color');\n```\n\n### Изменение переменных\n\n```javascript\n// Установить новое значение\ndocument.documentElement.style.setProperty('--primary-color', '#e74c3c');\n\n// Переключение темы\nfunction toggleTheme() {\n  const currentTheme = document.documentElement.getAttribute('data-theme');\n  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  document.documentElement.setAttribute('data-theme', newTheme);\n}\n```\n\n## Продвинутые техники\n\n### Анимация с переменными\n\n```css\n.animated-gradient {\n  --gradient-angle: 0deg;\n  background: linear-gradient(\n    var(--gradient-angle),\n    #3498db,\n    #e74c3c\n  );\n  animation: rotate-gradient 3s linear infinite;\n}\n\n@keyframes rotate-gradient {\n  to {\n    --gradient-angle: 360deg;\n  }\n}\n```\n\n### Компонентные системы\n\n```css\n.btn {\n  --btn-padding-x: 1rem;\n  --btn-padding-y: 0.5rem;\n  --btn-bg: var(--primary-color);\n  --btn-color: white;\n  --btn-border-radius: var(--border-radius);\n  \n  padding: var(--btn-padding-y) var(--btn-padding-x);\n  background: var(--btn-bg);\n  color: var(--btn-color);\n  border-radius: var(--btn-border-radius);\n}\n\n.btn--large {\n  --btn-padding-x: 1.5rem;\n  --btn-padding-y: 0.75rem;\n}\n\n.btn--success {\n  --btn-bg: var(--success-color);\n}\n```\n\nCSS переменные — это мощный инструмент для создания гибких и поддерживаемых стилей!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:51.837Z",
    "updated_at": "2025-08-07T07:41:51.837Z",
    "published_at": "2025-08-07T07:41:51.598Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 18,
    "slug": "css-pseudo-selectors",
    "title": "CSS Псевдо-классы и Псевдо-элементы: Мастерство Продвинутых Селекторов",
    "excerpt": "Глубокое погружение в CSS псевдо-классы и псевдо-элементы. Изучите :hover, :focus, ::before, ::after и продвинутые селекторы для создания интерактивных интерфейсов.",
    "content": "# CSS Псевдо-классы и Псевдо-элементы: Мастерство Продвинутых Селекторов\n\nПсевдо-классы и псевдо-элементы расширяют возможности CSS, позволяя стилизовать элементы на основе их состояния и создавать дополнительный контент.\n\n## Псевдо-классы\n\n### Состояния взаимодействия\n\n```css\n/* Основные состояния */\na:hover { color: #3498db; }\nbutton:active { transform: scale(0.95); }\ninput:focus { outline: 2px solid #3498db; }\n\n/* Группировка состояний */\nbutton:hover,\nbutton:focus {\n  background: #2980b9;\n}\n\n/* Focus-visible для доступности */\nbutton:focus-visible {\n  outline: 3px solid orange;\n}\n```\n\n### Структурные псевдо-классы\n\n```css\n/* Выбор по позиции */\nli:first-child { font-weight: bold; }\nli:last-child { margin-bottom: 0; }\nli:nth-child(odd) { background: #f5f5f5; }\nli:nth-child(3n) { color: red; }\n\n/* Выбор по типу */\np:first-of-type { font-size: 1.2em; }\nh2:last-of-type { margin-bottom: 2rem; }\n\n/* Единственный элемент */\nli:only-child { list-style: none; }\n```\n\n### Логические псевдо-классы\n\n```css\n/* :not() селектор */\ninput:not([type=\"submit\"]) {\n  border: 1px solid #ddd;\n}\n\n/* :is() для группировки */\n:is(h1, h2, h3):hover {\n  color: #3498db;\n}\n\n/* :where() с нулевой специфичностью */\n:where(article, section) h2 {\n  margin-top: 2rem;\n}\n\n/* :has() - родительский селектор */\n.card:has(img) {\n  display: grid;\n  grid-template-columns: 200px 1fr;\n}\n```\n\n## Псевдо-элементы\n\n### ::before и ::after\n\n```css\n/* Декоративные элементы */\n.quote::before {\n  content: \"\"\";\n  font-size: 3em;\n  color: #ccc;\n}\n\n/* Иконки через CSS */\n.external-link::after {\n  content: \" ↗\";\n  font-size: 0.8em;\n}\n\n/* Очистка float */\n.clearfix::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n```\n\n### Стилизация текста\n\n```css\n/* Первая буква */\np::first-letter {\n  font-size: 3em;\n  float: left;\n  line-height: 1;\n  margin-right: 0.1em;\n}\n\n/* Первая строка */\np::first-line {\n  font-weight: bold;\n  color: #333;\n}\n\n/* Выделение текста */\n::selection {\n  background: #3498db;\n  color: white;\n}\n```\n\n## Продвинутые техники\n\n### Анимированные подчёркивания\n\n```css\n.animated-link {\n  position: relative;\n  text-decoration: none;\n}\n\n.animated-link::after {\n  content: \"\";\n  position: absolute;\n  bottom: -2px;\n  left: 0;\n  width: 0;\n  height: 2px;\n  background: #3498db;\n  transition: width 0.3s ease;\n}\n\n.animated-link:hover::after {\n  width: 100%;\n}\n```\n\n### Tooltip через CSS\n\n```css\n.tooltip {\n  position: relative;\n}\n\n.tooltip::before {\n  content: attr(data-tooltip);\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0.5rem 1rem;\n  background: #333;\n  color: white;\n  border-radius: 4px;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.3s;\n}\n\n.tooltip:hover::before {\n  opacity: 1;\n}\n```\n\n### Счётчики CSS\n\n```css\n.numbered-list {\n  counter-reset: item;\n}\n\n.numbered-list li::before {\n  counter-increment: item;\n  content: counter(item) \". \";\n  font-weight: bold;\n  color: #3498db;\n}\n```\n\nПсевдо-классы и псевдо-элементы — ключ к созданию интерактивных и красивых интерфейсов!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:51.340Z",
    "updated_at": "2025-08-07T07:41:51.340Z",
    "published_at": "2025-08-07T07:41:51.087Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 17,
    "slug": "css-grid-layout",
    "title": "CSS Grid Layout: Полное Руководство с Примерами",
    "excerpt": "Освойте CSS Grid Layout с практическими примерами. Узнайте, как создавать сложные двумерные макеты с помощью grid контейнеров, линий и областей.",
    "content": "# CSS Grid Layout: Полное Руководство с Примерами\n\nCSS Grid — это двумерная система компоновки, которая революционизировала способ создания макетов веб-страниц.\n\n## Основы Grid\n\n### Создание Grid контейнера\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 20px;\n}\n```\n\n### Единицы измерения Grid\n\n```css\n.grid {\n  /* fr - фракционная единица */\n  grid-template-columns: 1fr 2fr 1fr;\n  \n  /* Фиксированные и гибкие размеры */\n  grid-template-columns: 200px 1fr 200px;\n  \n  /* Функция repeat() */\n  grid-template-columns: repeat(3, 1fr);\n  \n  /* minmax() для адаптивности */\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n```\n\n## Размещение элементов\n\n### По номерам линий\n\n```css\n.grid-item {\n  grid-column: 1 / 3; /* От линии 1 до линии 3 */\n  grid-row: 2 / 4;\n}\n\n/* Сокращённая запись */\n.item {\n  grid-area: 2 / 1 / 4 / 3; /* row-start / col-start / row-end / col-end */\n}\n```\n\n### Именованные области\n\n```css\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n## Практические примеры\n\n### Адаптивная галерея\n\n```css\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.gallery-item {\n  aspect-ratio: 1;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n```\n\n### Сложный макет журнала\n\n```css\n.magazine-layout {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 2rem;\n}\n\n.featured-article {\n  grid-column: span 2;\n  grid-row: span 2;\n}\n\n.regular-article {\n  grid-column: span 1;\n}\n\n@media (max-width: 768px) {\n  .magazine-layout {\n    grid-template-columns: 1fr;\n  }\n  \n  .featured-article {\n    grid-column: span 1;\n    grid-row: span 1;\n  }\n}\n```\n\n## Продвинутые техники\n\n### Выравнивание в Grid\n\n```css\n.grid-container {\n  display: grid;\n  \n  /* Выравнивание всех элементов */\n  justify-items: center; /* По горизонтали */\n  align-items: center; /* По вертикали */\n  \n  /* Выравнивание самого grid */\n  justify-content: center;\n  align-content: center;\n}\n\n/* Индивидуальное выравнивание */\n.grid-item {\n  justify-self: end;\n  align-self: start;\n}\n```\n\n### Наложение элементов\n\n```css\n.overlapping-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n\n.background-element {\n  grid-column: 1 / -1;\n  grid-row: 1;\n  z-index: 0;\n}\n\n.foreground-element {\n  grid-column: 2 / 3;\n  grid-row: 1;\n  z-index: 1;\n}\n```\n\nCSS Grid — мощнейший инструмент для создания любых макетов!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:50.849Z",
    "updated_at": "2025-08-07T07:41:50.849Z",
    "published_at": "2025-08-07T07:41:50.609Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 16,
    "slug": "css-flexbox-guide",
    "title": "CSS Flexbox: Полное Руководство с Практическими Примерами",
    "excerpt": "Исчерпывающее руководство по CSS Flexbox. Изучите flex контейнеры, элементы, выравнивание и создавайте адаптивные макеты с лёгкостью.",
    "content": "# CSS Flexbox: Полное Руководство с Практическими Примерами\n\nFlexbox — это мощная система компоновки, которая делает создание гибких и адаптивных макетов простым и интуитивным.\n\n## Основы Flexbox\n\n### Создание Flex контейнера\n\n```css\n.container {\n  display: flex;\n}\n```\n\n### Основные свойства контейнера\n\n```css\n.flex-container {\n  display: flex;\n  flex-direction: row; /* row | column | row-reverse | column-reverse */\n  flex-wrap: wrap; /* nowrap | wrap | wrap-reverse */\n  justify-content: space-between; /* flex-start | center | space-around | space-evenly */\n  align-items: center; /* stretch | flex-start | flex-end | baseline */\n  gap: 1rem; /* Расстояние между элементами */\n}\n```\n\n## Свойства Flex элементов\n\n### Управление размером\n\n```css\n.flex-item {\n  flex-grow: 1; /* Фактор роста */\n  flex-shrink: 1; /* Фактор сжатия */\n  flex-basis: 200px; /* Базовый размер */\n  \n  /* Сокращённая запись */\n  flex: 1 1 200px;\n}\n```\n\n### Индивидуальное выравнивание\n\n```css\n.special-item {\n  align-self: flex-start; /* Переопределяет align-items родителя */\n}\n```\n\n## Практические примеры\n\n### Адаптивная навигация\n\n```css\n.nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.nav-logo {\n  flex-shrink: 0;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  flex-wrap: wrap;\n}\n\n@media (max-width: 768px) {\n  .nav {\n    flex-direction: column;\n  }\n}\n```\n\n### Карточки одинаковой высоты\n\n```css\n.cards-container {\n  display: flex;\n  gap: 2rem;\n  flex-wrap: wrap;\n}\n\n.card {\n  flex: 1 1 300px;\n  display: flex;\n  flex-direction: column;\n}\n\n.card-content {\n  flex-grow: 1; /* Заполняет доступное пространство */\n}\n\n.card-footer {\n  margin-top: auto; /* Прижимается к низу */\n}\n```\n\n## Продвинутые техники\n\n### Центрирование элементов\n\n```css\n/* Идеальное центрирование */\n.center-perfect {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n}\n```\n\n### Holy Grail Layout\n\n```css\n.holy-grail {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.holy-grail-body {\n  display: flex;\n  flex: 1;\n}\n\n.sidebar {\n  flex: 0 0 200px;\n}\n\n.main-content {\n  flex: 1;\n}\n\n@media (max-width: 768px) {\n  .holy-grail-body {\n    flex-direction: column;\n  }\n  \n  .sidebar {\n    flex-basis: auto;\n  }\n}\n```\n\nFlexbox — незаменимый инструмент для современной веб-разработки!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:50.361Z",
    "updated_at": "2025-08-07T07:41:50.361Z",
    "published_at": "2025-08-07T07:41:50.119Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 15,
    "slug": "css-container-queries",
    "title": "CSS Container Queries: Будущее Адаптивных Компонентов",
    "excerpt": "Узнайте, как CSS Container Queries позволяют создавать по-настоящему адаптивные компоненты, которые реагируют на размер своего контейнера, а не viewport.",
    "content": "# CSS Container Queries: Будущее Адаптивных Компонентов\n\nCSS Container Queries революционизируют способ создания адаптивных компонентов, позволяя стилям реагировать на размер контейнера, а не только viewport.\n\n## Что такое Container Queries?\n\nContainer Queries позволяют применять стили на основе размера родительского контейнера компонента, а не размера окна браузера.\n\n### Базовый синтаксис\n\n```css\n/* Определяем контейнер */\n.card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n/* Используем container query */\n@container card (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n  }\n}\n```\n\n## Преимущества над Media Queries\n\n1. **Компонентная независимость** — компоненты адаптируются к своему контейнеру\n2. **Переиспользуемость** — один компонент работает в разных контекстах\n3. **Более точный контроль** — стили основаны на реальном доступном пространстве\n\n## Практические примеры\n\n### Адаптивная карточка\n\n```css\n.product-card {\n  container-type: inline-size;\n}\n\n.product-content {\n  padding: 1rem;\n}\n\n/* Компактный вид для маленьких контейнеров */\n@container (max-width: 300px) {\n  .product-content {\n    font-size: 0.875rem;\n  }\n  \n  .product-image {\n    height: 150px;\n  }\n}\n\n/* Расширенный вид для больших контейнеров */\n@container (min-width: 500px) {\n  .product-content {\n    display: grid;\n    grid-template-columns: 200px 1fr;\n    gap: 2rem;\n  }\n}\n```\n\n## Единицы измерения Container Query\n\n```css\n/* cqw - 1% от ширины контейнера */\n/* cqh - 1% от высоты контейнера */\n/* cqi - 1% от inline размера */\n/* cqb - 1% от block размера */\n\n.responsive-text {\n  font-size: clamp(1rem, 5cqi, 2rem);\n}\n```\n\nContainer Queries — это будущее компонентной архитектуры в CSS!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:49.799Z",
    "updated_at": "2025-08-07T07:41:49.799Z",
    "published_at": "2025-08-07T07:41:49.561Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 14,
    "slug": "css-animations",
    "title": "CSS Анимации: От Основ до Продвинутых Техник",
    "excerpt": "Узнайте, как создавать потрясающие анимации с помощью CSS. От простых переходов до сложных keyframe анимаций, оптимизации производительности и реальных примеров.",
    "content": "# CSS Анимации: От Основ до Продвинутых Техник\n\nCSS анимации оживляют веб-интерфейсы, создавая захватывающий пользовательский опыт без JavaScript. Это руководство охватывает всё от базовых переходов до продвинутых техник анимации.\n\n## CSS Transitions (Переходы)\n\nПереходы — это простейшая форма CSS анимации, идеальная для эффектов при наведении и изменении состояний.\n\n### Базовый синтаксис переходов\n\n```css\n.button {\n  background: #3498db;\n  color: white;\n  padding: 10px 20px;\n  transition: background 0.3s ease;\n}\n\n.button:hover {\n  background: #2980b9;\n}\n```\n\n### Множественные переходы\n\n```css\n.card {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 20px rgba(0,0,0,0.2);\n}\n```\n\n## Keyframe Анимации\n\nДля более сложных анимаций используйте @keyframes:\n\n```css\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.pulse-button {\n  animation: pulse 2s infinite;\n}\n```\n\n## Оптимизация производительности\n\n1. **Используйте transform и opacity** — они оптимизированы браузером\n2. **Избегайте анимации layout свойств** (width, height, padding)\n3. **Используйте will-change** для подготовки браузера к анимации\n\n```css\n.animated-element {\n  will-change: transform;\n}\n```\n\n## Практические примеры\n\n### Анимация загрузки\n\n```css\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.loader {\n  width: 50px;\n  height: 50px;\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #3498db;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n```\n\nCSS анимации — мощный инструмент для создания интерактивных и привлекательных веб-интерфейсов!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "ru",
    "created_at": "2025-08-07T07:41:49.230Z",
    "updated_at": "2025-08-07T07:41:49.230Z",
    "published_at": "2025-08-07T07:41:48.464Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 7,
    "slug": "css-variables",
    "title": "CSS Variables (Custom Properties): Dynamic Styling Made Easy",
    "excerpt": "Master CSS custom properties for dynamic, maintainable stylesheets. Learn how to create themes, responsive designs, and interactive components with CSS variables.",
    "content": "\nCSS Custom Properties (commonly known as CSS Variables) revolutionize how we write and maintain CSS. They bring the power of variables to CSS, enabling dynamic styling, theming, and more maintainable code.\n\n## Basic Syntax and Usage\n\n### Declaring CSS Variables\n\n```css\n:root {\n  /* Global variables */\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --spacing-unit: 1rem;\n  --border-radius: 8px;\n}\n\n.component {\n  /* Scoped variables */\n  --component-padding: calc(var(--spacing-unit) * 2);\n  --component-bg: #f8f9fa;\n}\n```\n\n### Using CSS Variables\n\n```css\n.button {\n  background-color: var(--primary-color);\n  padding: var(--spacing-unit);\n  border-radius: var(--border-radius);\n  \n  /* With fallback value */\n  color: var(--button-text-color, white);\n}\n```\n\n## Variable Scope and Inheritance\n\n### Global vs Local Scope\n\n```css\n:root {\n  --global-color: blue;\n}\n\n.parent {\n  --local-color: red;\n  color: var(--local-color); /* red */\n}\n\n.child {\n  /* Inherits from parent */\n  background: var(--local-color); /* red */\n  border-color: var(--global-color); /* blue */\n}\n```\n\n### Overriding Variables\n\n```css\n:root {\n  --spacing: 1rem;\n}\n\n.compact {\n  --spacing: 0.5rem;\n}\n\n.spacious {\n  --spacing: 2rem;\n}\n\n.element {\n  padding: var(--spacing);\n  /* Padding changes based on parent class */\n}\n```\n\n## Dynamic Theming\n\n### Light/Dark Theme Implementation\n\n```css\n:root {\n  /* Light theme (default) */\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8f9fa;\n  --text-primary: #212529;\n  --text-secondary: #6c757d;\n  --border-color: #dee2e6;\n  --shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n[data-theme=\"dark\"] {\n  /* Dark theme */\n  --bg-primary: #1a1a1a;\n  --bg-secondary: #2d2d2d;\n  --text-primary: #ffffff;\n  --text-secondary: #b0b0b0;\n  --border-color: #404040;\n  --shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n/* Components automatically adapt */\nbody {\n  background-color: var(--bg-primary);\n  color: var(--text-primary);\n  transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  box-shadow: var(--shadow);\n  padding: 1.5rem;\n  border-radius: 8px;\n}\n\n.text-muted {\n  color: var(--text-secondary);\n}\n```\n\n### Theme Switcher JavaScript\n\n```javascript\n// Toggle theme\nconst toggleTheme = () => {\n  const currentTheme = document.documentElement.getAttribute('data-theme');\n  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  document.documentElement.setAttribute('data-theme', newTheme);\n  localStorage.setItem('theme', newTheme);\n};\n\n// Load saved theme\nconst savedTheme = localStorage.getItem('theme') || 'light';\ndocument.documentElement.setAttribute('data-theme', savedTheme);\n```\n\n## Responsive Design with Variables\n\n### Responsive Typography\n\n```css\n:root {\n  --font-size-base: 16px;\n  --font-size-scale: 1.2;\n  \n  /* Type scale */\n  --font-size-sm: calc(var(--font-size-base) / var(--font-size-scale));\n  --font-size-md: var(--font-size-base);\n  --font-size-lg: calc(var(--font-size-base) * var(--font-size-scale));\n  --font-size-xl: calc(var(--font-size-lg) * var(--font-size-scale));\n  --font-size-xxl: calc(var(--font-size-xl) * var(--font-size-scale));\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  :root {\n    --font-size-base: 14px;\n  }\n}\n\nh1 { font-size: var(--font-size-xxl); }\nh2 { font-size: var(--font-size-xl); }\nh3 { font-size: var(--font-size-lg); }\np { font-size: var(--font-size-md); }\nsmall { font-size: var(--font-size-sm); }\n```\n\n### Responsive Spacing System\n\n```css\n:root {\n  --spacing-base: 1rem;\n  \n  /* Spacing scale */\n  --space-xs: calc(var(--spacing-base) * 0.25);\n  --space-sm: calc(var(--spacing-base) * 0.5);\n  --space-md: var(--spacing-base);\n  --space-lg: calc(var(--spacing-base) * 1.5);\n  --space-xl: calc(var(--spacing-base) * 2);\n  --space-xxl: calc(var(--spacing-base) * 3);\n}\n\n@media (max-width: 768px) {\n  :root {\n    --spacing-base: 0.875rem;\n  }\n}\n\n.section {\n  padding: var(--space-xl) var(--space-lg);\n}\n\n.stack > * + * {\n  margin-top: var(--space-md);\n}\n```\n\n## Advanced Techniques\n\n### 1. Computed Values with calc()\n\n```css\n:root {\n  --grid-columns: 12;\n  --grid-gap: 20px;\n  --container-width: 1200px;\n}\n\n.grid-item {\n  --columns-span: 4;\n  width: calc(\n    (var(--container-width) - (var(--grid-columns) - 1) * var(--grid-gap)) \n    / var(--grid-columns) \n    * var(--columns-span)\n    + (var(--columns-span) - 1) * var(--grid-gap)\n  );\n}\n```\n\n### 2. Color Manipulation\n\n```css\n:root {\n  --primary-h: 210;\n  --primary-s: 100%;\n  --primary-l: 50%;\n  \n  /* Base color */\n  --primary: hsl(var(--primary-h), var(--primary-s), var(--primary-l));\n  \n  /* Variations */\n  --primary-light: hsl(var(--primary-h), var(--primary-s), calc(var(--primary-l) + 20%));\n  --primary-dark: hsl(var(--primary-h), var(--primary-s), calc(var(--primary-l) - 20%));\n  --primary-alpha: hsla(var(--primary-h), var(--primary-s), var(--primary-l), 0.2);\n}\n\n.button {\n  background: var(--primary);\n  border: 2px solid var(--primary-dark);\n  box-shadow: 0 4px 6px var(--primary-alpha);\n}\n\n.button:hover {\n  background: var(--primary-dark);\n}\n```\n\n### 3. Dynamic Animations\n\n```css\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(var(--pulse-scale, 1.05));\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.pulse-sm {\n  --pulse-scale: 1.02;\n  animation: pulse 2s infinite;\n}\n\n.pulse-lg {\n  --pulse-scale: 1.1;\n  animation: pulse 2s infinite;\n}\n```\n\n### 4. Component Configuration\n\n```css\n/* Configurable button component */\n.btn {\n  --btn-padding-y: 0.5rem;\n  --btn-padding-x: 1rem;\n  --btn-font-size: 1rem;\n  --btn-border-radius: 0.25rem;\n  --btn-bg: var(--primary-color);\n  --btn-color: white;\n  --btn-border-width: 2px;\n  --btn-border-color: transparent;\n  --btn-hover-bg: var(--primary-dark);\n  \n  padding: var(--btn-padding-y) var(--btn-padding-x);\n  font-size: var(--btn-font-size);\n  border-radius: var(--btn-border-radius);\n  background: var(--btn-bg);\n  color: var(--btn-color);\n  border: var(--btn-border-width) solid var(--btn-border-color);\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.btn:hover {\n  background: var(--btn-hover-bg);\n}\n\n/* Variants */\n.btn-lg {\n  --btn-padding-y: 0.75rem;\n  --btn-padding-x: 1.5rem;\n  --btn-font-size: 1.125rem;\n}\n\n.btn-outline {\n  --btn-bg: transparent;\n  --btn-color: var(--primary-color);\n  --btn-border-color: currentColor;\n  --btn-hover-bg: var(--primary-color);\n  --btn-hover-color: white;\n}\n\n.btn-outline:hover {\n  color: var(--btn-hover-color);\n}\n```\n\n## JavaScript Integration\n\n### Reading CSS Variables\n\n```javascript\n// Get computed styles\nconst styles = getComputedStyle(document.documentElement);\nconst primaryColor = styles.getPropertyValue('--primary-color');\n\n// Get from specific element\nconst element = document.querySelector('.component');\nconst elementStyles = getComputedStyle(element);\nconst spacing = elementStyles.getPropertyValue('--spacing');\n```\n\n### Setting CSS Variables\n\n```javascript\n// Set on root\ndocument.documentElement.style.setProperty('--primary-color', '#e74c3c');\n\n// Set on specific element\nelement.style.setProperty('--component-height', '200px');\n\n// Dynamic updates\nconst updateThemeColor = (hue) => {\n  document.documentElement.style.setProperty('--primary-h', hue);\n};\n\n// Reactive to user input\nslider.addEventListener('input', (e) => {\n  updateThemeColor(e.target.value);\n});\n```\n\n### Responsive Variables with JavaScript\n\n```javascript\n// Update variables based on viewport\nconst updateCSSVariables = () => {\n  const vw = window.innerWidth;\n  const vh = window.innerHeight;\n  \n  document.documentElement.style.setProperty('--vw', `${vw}px`);\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n  \n  // Custom breakpoint variable\n  const breakpoint = vw < 768 ? 'mobile' : vw < 1024 ? 'tablet' : 'desktop';\n  document.documentElement.style.setProperty('--device', `\"${breakpoint}\"`);\n};\n\nwindow.addEventListener('resize', updateCSSVariables);\nupdateCSSVariables();\n```\n\n## Real-World Examples\n\n### 1. Design System Variables\n\n```css\n:root {\n  /* Colors */\n  --color-primary: #1a73e8;\n  --color-secondary: #ea4335;\n  --color-success: #34a853;\n  --color-warning: #fbbc04;\n  --color-error: #ea4335;\n  \n  /* Typography */\n  --font-family-base: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-family-mono: 'Fira Code', Monaco, monospace;\n  --line-height-base: 1.6;\n  --line-height-heading: 1.2;\n  \n  /* Shadows */\n  --shadow-sm: 0 1px 2px rgba(0,0,0,0.05);\n  --shadow-md: 0 4px 6px rgba(0,0,0,0.1);\n  --shadow-lg: 0 10px 15px rgba(0,0,0,0.15);\n  \n  /* Z-index scale */\n  --z-dropdown: 1000;\n  --z-sticky: 1020;\n  --z-fixed: 1030;\n  --z-modal-backdrop: 1040;\n  --z-modal: 1050;\n  --z-popover: 1060;\n  --z-tooltip: 1070;\n}\n```\n\n### 2. Grid System with Variables\n\n```css\n.grid {\n  --grid-columns: 12;\n  --grid-gap: 1rem;\n  \n  display: grid;\n  grid-template-columns: repeat(var(--grid-columns), 1fr);\n  gap: var(--grid-gap);\n}\n\n.grid-item {\n  grid-column: span var(--span, 1);\n}\n\n/* Usage */\n.col-6 { --span: 6; }\n.col-4 { --span: 4; }\n.col-3 { --span: 3; }\n\n@media (max-width: 768px) {\n  .grid {\n    --grid-columns: 4;\n  }\n  \n  .col-sm-full { --span: 4; }\n  .col-sm-half { --span: 2; }\n}\n```\n\n## Performance Considerations\n\n1. **Variables are live**: Changes update everywhere instantly\n2. **Inheritance works**: Children inherit parent values\n3. **calc() is computed**: Complex calculations may impact performance\n4. **Browser support**: Modern browsers fully support CSS variables\n\n## Best Practices\n\n1. **Naming conventions**: Use consistent prefixes (--color-, --space-, --font-)\n2. **Provide fallbacks**: Always include fallback values for critical styles\n3. **Document variables**: Comment complex calculations or non-obvious values\n4. **Organize logically**: Group related variables together\n5. **Start global**: Define system-wide variables in :root\n6. **Component scope**: Use local variables for component-specific values\n\nCSS Variables transform static stylesheets into dynamic, maintainable systems. Master them to build flexible, themeable applications with ease!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:03.874Z",
    "updated_at": "2025-08-06T15:14:03.874Z",
    "published_at": "2025-08-06T15:14:03.691Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 6,
    "slug": "css-pseudo-selectors",
    "title": "CSS Pseudo-classes and Pseudo-elements: Master Advanced Selectors",
    "excerpt": "Deep dive into CSS pseudo-classes and pseudo-elements. Learn how to create sophisticated interactions and visual effects without JavaScript.",
    "content": "\nCSS pseudo-classes and pseudo-elements are powerful selectors that allow you to style elements based on their state or create virtual elements. Understanding these selectors unlocks advanced styling capabilities without additional HTML or JavaScript.\n\n## Understanding the Difference\n\n### Pseudo-classes (:)\nTarget elements based on state or position:\n```css\nbutton:hover { } /* State */\nli:first-child { } /* Position */\ninput:valid { } /* Validation */\n```\n\n### Pseudo-elements (::)\nCreate or target virtual elements:\n```css\np::first-line { } /* Target part of element */\ndiv::before { } /* Create new element */\n::selection { } /* Style user selection */\n```\n\n## Essential Pseudo-classes\n\n### 1. Interactive States\n\n```css\n/* Hover state */\n.button:hover {\n  background-color: #2980b9;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n/* Focus state - important for accessibility */\n.input:focus {\n  outline: 2px solid #3498db;\n  outline-offset: 2px;\n  border-color: #3498db;\n}\n\n/* Active state - when clicked */\n.button:active {\n  transform: translateY(0);\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n/* Visited links */\na:visited {\n  color: #8e44ad;\n}\n\n/* Focus visible - only shows focus ring for keyboard navigation */\n.button:focus-visible {\n  outline: 3px solid #f39c12;\n  outline-offset: 2px;\n}\n\n/* Remove focus for mouse users */\n.button:focus:not(:focus-visible) {\n  outline: none;\n}\n```\n\n### 2. Structural Pseudo-classes\n\n```css\n/* First and last child */\n.list-item:first-child {\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n\n.list-item:last-child {\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n/* Nth-child patterns */\n.table-row:nth-child(even) {\n  background-color: #f8f9fa;\n}\n\n.table-row:nth-child(odd) {\n  background-color: white;\n}\n\n/* Every 3rd item */\n.grid-item:nth-child(3n) {\n  margin-right: 0;\n}\n\n/* First 3 items */\n.card:nth-child(-n+3) {\n  background-color: #e3f2fd;\n}\n\n/* All but first 3 */\n.card:nth-child(n+4) {\n  opacity: 0.8;\n}\n\n/* Only child */\n.alert:only-child {\n  margin: 2rem auto;\n  max-width: 600px;\n}\n\n/* Type selectors */\np:first-of-type {\n  font-size: 1.25rem;\n  font-weight: 500;\n}\n\nh2:last-of-type {\n  margin-bottom: 2rem;\n}\n```\n\n### 3. Form Pseudo-classes\n\n```css\n/* Input states */\ninput:valid {\n  border-color: #27ae60;\n  background-color: #f0fdf4;\n}\n\ninput:invalid {\n  border-color: #e74c3c;\n  background-color: #fef2f2;\n}\n\ninput:required {\n  border-left: 3px solid #f39c12;\n}\n\ninput:optional {\n  border-left: 3px solid #95a5a6;\n}\n\ninput:disabled {\n  background-color: #ecf0f1;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\ninput:enabled {\n  background-color: white;\n}\n\ninput:read-only {\n  background-color: #f5f5f5;\n  cursor: default;\n}\n\ninput:read-write {\n  background-color: white;\n}\n\n/* Checkbox and radio states */\ninput[type=\"checkbox\"]:checked + label {\n  color: #27ae60;\n  font-weight: bold;\n}\n\ninput[type=\"radio\"]:checked + label::before {\n  content: \"✓ \";\n  color: #27ae60;\n}\n\n/* Number input states */\ninput[type=\"number\"]:in-range {\n  border-color: #27ae60;\n}\n\ninput[type=\"number\"]:out-of-range {\n  border-color: #e74c3c;\n  background-color: #fee;\n}\n\n/* Placeholder shown */\ninput:placeholder-shown {\n  border-style: dashed;\n}\n\n/* Form validation example */\n.form-group:has(input:invalid) {\n  background-color: #fef2f2;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.form-group:has(input:valid) {\n  background-color: #f0fdf4;\n  padding: 1rem;\n  border-radius: 4px;\n}\n```\n\n### 4. Advanced Selectors\n\n```css\n/* :is() - matches any selector in the list */\n:is(h1, h2, h3):hover {\n  color: #3498db;\n  cursor: pointer;\n}\n\n/* :where() - same as :is() but with 0 specificity */\n:where(h1, h2, h3) {\n  line-height: 1.2;\n}\n\n/* :has() - parent selector */\narticle:has(img) {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n}\n\n/* Container that has a checked checkbox */\n.option-card:has(input:checked) {\n  border-color: #3498db;\n  background-color: #ebf5ff;\n}\n\n/* :not() - negation */\n.button:not(:disabled):hover {\n  transform: translateY(-2px);\n}\n\n/* Multiple :not() */\ninput:not([type=\"submit\"]):not([type=\"button\"]):not([type=\"reset\"]) {\n  width: 100%;\n  padding: 0.5rem;\n}\n\n/* :empty - elements with no children */\n.message:empty {\n  display: none;\n}\n\n.message:not(:empty) {\n  padding: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n/* :target - matches element targeted by URL hash */\nsection:target {\n  background-color: #fffacd;\n  padding: 2rem;\n  border-left: 4px solid #f39c12;\n}\n```\n\n## Powerful Pseudo-elements\n\n### 1. ::before and ::after\n\n```css\n/* Decorative elements */\n.quote::before {\n  content: \"\"\";\n  font-size: 3rem;\n  color: #bdc3c7;\n  position: absolute;\n  top: -10px;\n  left: -30px;\n}\n\n.quote::after {\n  content: \"\"\";\n  font-size: 3rem;\n  color: #bdc3c7;\n  position: absolute;\n  bottom: -30px;\n  right: -30px;\n}\n\n/* Icons without fonts */\n.external-link::after {\n  content: \" ↗\";\n  font-size: 0.8em;\n  vertical-align: super;\n}\n\n/* Tooltips */\n.tooltip {\n  position: relative;\n}\n\n.tooltip::after {\n  content: attr(data-tooltip);\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  background: #333;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  white-space: nowrap;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.3s;\n}\n\n.tooltip:hover::after {\n  opacity: 1;\n}\n\n/* Custom counters */\n.timeline-item {\n  counter-increment: timeline;\n  position: relative;\n  padding-left: 3rem;\n}\n\n.timeline-item::before {\n  content: counter(timeline);\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 2rem;\n  height: 2rem;\n  background: #3498db;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n```\n\n### 2. ::first-line and ::first-letter\n\n```css\n/* Drop cap */\np::first-letter {\n  font-size: 3rem;\n  font-weight: bold;\n  float: left;\n  line-height: 1;\n  margin-right: 0.5rem;\n  color: #e74c3c;\n}\n\n/* Styled first line */\narticle p::first-line {\n  font-weight: 500;\n  font-size: 1.1em;\n  color: #2c3e50;\n}\n```\n\n### 3. ::selection\n\n```css\n/* Custom text selection */\n::selection {\n  background-color: #3498db;\n  color: white;\n}\n\n/* Different selection for specific elements */\n.important::selection {\n  background-color: #e74c3c;\n  color: white;\n}\n\n/* Firefox prefix */\n::-moz-selection {\n  background-color: #3498db;\n  color: white;\n}\n```\n\n### 4. Form Control Pseudo-elements\n\n```css\n/* Placeholder styling */\n::placeholder {\n  color: #95a5a6;\n  font-style: italic;\n}\n\ninput:focus::placeholder {\n  color: transparent;\n}\n\n/* File input button */\n::file-selector-button {\n  background: #3498db;\n  color: white;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 1rem;\n}\n\n::file-selector-button:hover {\n  background: #2980b9;\n}\n\n/* Webkit scrollbar */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 6px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n```\n\n## Complex Examples\n\n### 1. Custom Checkbox\n\n```css\n/* Hide default checkbox */\ninput[type=\"checkbox\"] {\n  position: absolute;\n  opacity: 0;\n}\n\n/* Custom checkbox */\n.checkbox-label {\n  position: relative;\n  padding-left: 30px;\n  cursor: pointer;\n}\n\n.checkbox-label::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 20px;\n  height: 20px;\n  border: 2px solid #3498db;\n  border-radius: 4px;\n  background: white;\n  transition: all 0.3s;\n}\n\n.checkbox-label::after {\n  content: \"✓\";\n  position: absolute;\n  left: 5px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: white;\n  font-size: 14px;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\ninput[type=\"checkbox\"]:checked + .checkbox-label::before {\n  background: #3498db;\n}\n\ninput[type=\"checkbox\"]:checked + .checkbox-label::after {\n  opacity: 1;\n}\n\ninput[type=\"checkbox\"]:focus + .checkbox-label::before {\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.3);\n}\n```\n\n### 2. Advanced Navigation\n\n```css\n/* Multi-level navigation with indicators */\n.nav-item {\n  position: relative;\n}\n\n.nav-item:hover > .nav-link {\n  color: #3498db;\n}\n\n/* Dropdown indicator */\n.nav-item:has(.dropdown)::after {\n  content: \"▼\";\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 0.8em;\n  transition: transform 0.3s;\n}\n\n.nav-item:hover::after {\n  transform: translateY(-50%) rotate(180deg);\n}\n\n/* Active page indicator */\n.nav-link:is(.active, [aria-current=\"page\"])::before {\n  content: \"\";\n  position: absolute;\n  bottom: -2px;\n  left: 0;\n  right: 0;\n  height: 3px;\n  background: #3498db;\n  transform: scaleX(0);\n  transition: transform 0.3s;\n}\n\n.nav-link:is(.active, [aria-current=\"page\"])::before,\n.nav-link:hover::before {\n  transform: scaleX(1);\n}\n```\n\n### 3. Loading States\n\n```css\n/* Skeleton loading effect */\n.skeleton {\n  position: relative;\n  overflow: hidden;\n  background: #eee;\n}\n\n.skeleton::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: linear-gradient(\n    90deg,\n    transparent 0%,\n    rgba(255, 255, 255, 0.5) 50%,\n    transparent 100%\n  );\n  animation: skeleton-loading 1.5s infinite;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n/* Loading dots */\n.loading::after {\n  content: \"\";\n  animation: dots 1.5s steps(4, end) infinite;\n}\n\n@keyframes dots {\n  0% { content: \"\"; }\n  25% { content: \".\"; }\n  50% { content: \"..\"; }\n  75% { content: \"...\"; }\n  100% { content: \"\"; }\n}\n```\n\n## Performance Tips\n\n1. **Pseudo-elements create real elements**: They impact render tree\n2. **Complex selectors can be slow**: Keep specificity reasonable\n3. **Avoid expensive properties**: Shadows, filters in pseudo-elements\n4. **Use CSS containment**: Limit style recalculation scope\n\n## Browser Compatibility\n\nMost pseudo-classes and pseudo-elements have excellent support, but newer ones require checking:\n- `:has()` - Modern browsers only\n- `:is()` / `:where()` - Good support\n- `::marker` - Good support\n- `:focus-visible` - Modern browsers\n\nMaster pseudo-classes and pseudo-elements to write cleaner HTML while achieving sophisticated designs and interactions purely with CSS!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:03.251Z",
    "updated_at": "2025-08-06T15:14:03.251Z",
    "published_at": "2025-08-06T15:14:03.069Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 5,
    "slug": "css-grid-layout",
    "title": "CSS Grid Layout: Complete Guide with Examples",
    "excerpt": "Master CSS Grid Layout with practical examples. Learn how to create complex layouts with grid containers, grid items, and responsive design patterns.",
    "content": "\nCSS Grid Layout is a powerful two-dimensional layout system that revolutionized how we create web layouts. Unlike Flexbox, which is primarily one-dimensional, Grid allows you to work with both rows and columns simultaneously.\n\n## Basic Grid Container\n\nTo create a grid container, simply apply `display: grid` to an element:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 200px;\n  gap: 20px;\n}\n```\n\nThis creates a grid with 3 equal columns and 2 rows with specific heights.\n\n## Grid Template Areas\n\nOne of the most intuitive features of CSS Grid is template areas:\n\n```css\n.container {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main main\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 1fr;\n  grid-template-rows: 80px 1fr 60px;\n  gap: 10px;\n}\n\n.header {\n  grid-area: header;\n  background: #3498db;\n}\n\n.sidebar {\n  grid-area: sidebar;\n  background: #e74c3c;\n}\n\n.main {\n  grid-area: main;\n  background: #2ecc71;\n}\n\n.footer {\n  grid-area: footer;\n  background: #34495e;\n}\n```\n\n## Responsive Grid with auto-fit and minmax\n\nCreate responsive grids without media queries:\n\n```css\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n}\n```\n\nThis creates a responsive gallery where items automatically wrap to new rows as needed.\n\n## Advanced Grid Placement\n\nControl item placement with precision:\n\n```css\n.item {\n  grid-column: 1 / 3; /* Spans from column 1 to 3 */\n  grid-row: 2 / 4;    /* Spans from row 2 to 4 */\n}\n\n/* Using span keyword */\n.wide-item {\n  grid-column: span 2;\n  grid-row: span 3;\n}\n\n/* Negative line numbers */\n.full-width {\n  grid-column: 1 / -1; /* Spans entire width */\n}\n```\n\n## Implicit vs Explicit Grid\n\nCSS Grid automatically creates tracks when needed:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: minmax(100px, auto);\n  grid-auto-flow: dense; /* Fills gaps automatically */\n}\n```\n\n## Practical Example: Dashboard Layout\n\nHere's a complete dashboard layout using CSS Grid:\n\n```html\n<div class=\"dashboard\">\n  <header class=\"dashboard-header\">Header</header>\n  <nav class=\"dashboard-nav\">Navigation</nav>\n  <main class=\"dashboard-main\">\n    <div class=\"card\">Card 1</div>\n    <div class=\"card\">Card 2</div>\n    <div class=\"card wide\">Wide Card</div>\n    <div class=\"card\">Card 3</div>\n  </main>\n  <aside class=\"dashboard-sidebar\">Sidebar</aside>\n</div>\n```\n\n```css\n.dashboard {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"nav main sidebar\";\n  grid-template-columns: 200px 1fr 250px;\n  grid-template-rows: 60px 1fr;\n  min-height: 100vh;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.dashboard-header {\n  grid-area: header;\n  background: #2c3e50;\n  color: white;\n  padding: 1rem;\n}\n\n.dashboard-nav {\n  grid-area: nav;\n  background: #34495e;\n  color: white;\n  padding: 1rem;\n}\n\n.dashboard-main {\n  grid-area: main;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  grid-auto-rows: minmax(150px, auto);\n}\n\n.dashboard-sidebar {\n  grid-area: sidebar;\n  background: #ecf0f1;\n  padding: 1rem;\n}\n\n.card {\n  background: white;\n  padding: 1rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.card.wide {\n  grid-column: span 2;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .dashboard {\n    grid-template-areas:\n      \"header\"\n      \"nav\"\n      \"main\"\n      \"sidebar\";\n    grid-template-columns: 1fr;\n    grid-template-rows: auto auto 1fr auto;\n  }\n  \n  .card.wide {\n    grid-column: span 1;\n  }\n}\n```\n\n## Grid Alignment\n\nControl alignment of the entire grid and individual items:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 100px);\n  grid-template-rows: repeat(2, 100px);\n  gap: 10px;\n  \n  /* Grid alignment */\n  justify-content: center; /* Horizontal alignment */\n  align-content: center;   /* Vertical alignment */\n  \n  /* Item alignment */\n  justify-items: center;   /* All items horizontally */\n  align-items: center;     /* All items vertically */\n}\n\n/* Individual item alignment */\n.special-item {\n  justify-self: start;\n  align-self: end;\n}\n```\n\n## Subgrid (Modern Browsers)\n\nSubgrid allows nested grids to align with parent grid tracks:\n\n```css\n.parent {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n\n.child {\n  display: grid;\n  grid-template-columns: subgrid;\n  grid-column: span 2;\n}\n```\n\n## Best Practices\n\n1. **Use Grid for 2D layouts**: When you need to control both rows and columns\n2. **Combine with Flexbox**: Use Grid for overall layout, Flexbox for component internals\n3. **Mobile-first approach**: Start with simple layouts and enhance for larger screens\n4. **Semantic HTML**: Use proper HTML elements regardless of grid placement\n5. **Fallbacks**: Provide fallbacks for older browsers when necessary\n\nCSS Grid has transformed web layout possibilities, making complex designs achievable with clean, maintainable code. Master it, and you'll have a powerful tool in your web development arsenal.",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:02.658Z",
    "updated_at": "2025-08-06T15:14:02.658Z",
    "published_at": "2025-08-06T15:14:02.475Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 4,
    "slug": "css-flexbox-guide",
    "title": "CSS Flexbox: The Ultimate Guide with Practical Examples",
    "excerpt": "Comprehensive guide to CSS Flexbox layout. Learn flex containers, flex items, alignment, and real-world use cases with code examples.",
    "content": "\nFlexbox (Flexible Box Layout) is a one-dimensional layout method that excels at distributing space and aligning items in a container. It's perfect for component layouts, navigation bars, and any scenario where you need flexible, responsive arrangements.\n\n## Flex Container Basics\n\nTo create a flex container, apply `display: flex`:\n\n```css\n.container {\n  display: flex;\n  /* or display: inline-flex; for inline containers */\n}\n```\n\n## Main Axis and Cross Axis\n\nUnderstanding axes is crucial for Flexbox:\n\n```css\n.container {\n  display: flex;\n  flex-direction: row; /* Main axis: horizontal, Cross axis: vertical */\n  /* Other values: row-reverse, column, column-reverse */\n}\n```\n\n## Flex Container Properties\n\n### 1. justify-content (Main Axis Alignment)\n\n```css\n.container {\n  display: flex;\n  justify-content: flex-start; /* Default */\n  /* Other values: flex-end, center, space-between, space-around, space-evenly */\n}\n\n/* Practical example: Navigation */\n.nav {\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n  background: #2c3e50;\n}\n\n.nav-logo {\n  font-weight: bold;\n  color: white;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n```\n\n### 2. align-items (Cross Axis Alignment)\n\n```css\n.container {\n  display: flex;\n  align-items: stretch; /* Default */\n  /* Other values: flex-start, flex-end, center, baseline */\n}\n\n/* Practical example: Card with icon */\n.card {\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.card-icon {\n  width: 48px;\n  height: 48px;\n  margin-right: 1rem;\n}\n```\n\n### 3. flex-wrap\n\n```css\n.container {\n  display: flex;\n  flex-wrap: nowrap; /* Default */\n  /* Other values: wrap, wrap-reverse */\n}\n\n/* Practical example: Tag list */\n.tag-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.tag {\n  padding: 0.25rem 0.75rem;\n  background: #3498db;\n  color: white;\n  border-radius: 20px;\n  font-size: 0.875rem;\n}\n```\n\n### 4. align-content (Multi-line Cross Axis)\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-start;\n  /* Other values: flex-end, center, space-between, space-around, stretch */\n  height: 300px;\n}\n```\n\n### 5. gap (Spacing Between Items)\n\n```css\n.container {\n  display: flex;\n  gap: 20px; /* Both row and column gap */\n  /* Or separately: row-gap: 10px; column-gap: 20px; */\n}\n```\n\n## Flex Item Properties\n\n### 1. flex-grow, flex-shrink, flex-basis\n\n```css\n.item {\n  flex-grow: 0;    /* Don't grow */\n  flex-shrink: 1;  /* Can shrink */\n  flex-basis: auto; /* Initial size */\n  \n  /* Shorthand */\n  flex: 1; /* Equivalent to: flex: 1 1 0 */\n}\n\n/* Practical example: Sidebar layout */\n.layout {\n  display: flex;\n  gap: 2rem;\n  min-height: 100vh;\n}\n\n.sidebar {\n  flex: 0 0 250px; /* Don't grow or shrink, fixed 250px */\n  background: #ecf0f1;\n  padding: 1rem;\n}\n\n.main-content {\n  flex: 1; /* Take remaining space */\n  padding: 1rem;\n}\n```\n\n### 2. align-self (Individual Cross Axis Alignment)\n\n```css\n.item {\n  align-self: auto; /* Default - uses align-items value */\n  /* Other values: flex-start, flex-end, center, baseline, stretch */\n}\n\n/* Practical example: Hero section */\n.hero {\n  display: flex;\n  align-items: center;\n  min-height: 400px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.hero-content {\n  flex: 1;\n  padding: 2rem;\n  color: white;\n}\n\n.hero-image {\n  flex: 1;\n  align-self: stretch;\n  object-fit: cover;\n}\n```\n\n### 3. order (Visual Order)\n\n```css\n.item {\n  order: 0; /* Default */\n  /* Negative values come first, positive values come last */\n}\n\n/* Practical example: Mobile-first layout */\n.article {\n  display: flex;\n  flex-direction: column;\n}\n\n.article-content { order: 2; }\n.article-sidebar { order: 1; }\n.article-related { order: 3; }\n\n@media (min-width: 768px) {\n  .article {\n    flex-direction: row;\n  }\n  \n  .article-content { order: 1; flex: 2; }\n  .article-sidebar { order: 2; flex: 1; }\n  .article-related { order: 3; flex: 1; }\n}\n```\n\n## Common Flexbox Patterns\n\n### 1. Centering Content\n\n```css\n/* Perfect centering */\n.center-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n}\n\n/* Horizontal centering only */\n.h-center {\n  display: flex;\n  justify-content: center;\n}\n\n/* Vertical centering only */\n.v-center {\n  display: flex;\n  align-items: center;\n}\n```\n\n### 2. Equal Height Columns\n\n```css\n.columns {\n  display: flex;\n  gap: 2rem;\n}\n\n.column {\n  flex: 1;\n  padding: 1.5rem;\n  background: #f8f9fa;\n  border-radius: 8px;\n  /* All columns will have equal height automatically */\n}\n```\n\n### 3. Sticky Footer\n\n```css\nbody {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  margin: 0;\n}\n\nmain {\n  flex: 1; /* Takes all available space */\n}\n\nfooter {\n  background: #2c3e50;\n  color: white;\n  padding: 2rem;\n  /* Always sticks to bottom */\n}\n```\n\n### 4. Media Object\n\n```css\n.media {\n  display: flex;\n  align-items: flex-start;\n  gap: 1rem;\n}\n\n.media-image {\n  flex-shrink: 0;\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.media-content {\n  flex: 1;\n}\n```\n\n### 5. Responsive Navigation\n\n```css\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 2rem;\n  background: #2c3e50;\n}\n\n.nav-menu {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.nav-item a {\n  color: white;\n  text-decoration: none;\n  transition: opacity 0.3s;\n}\n\n.nav-item a:hover {\n  opacity: 0.8;\n}\n\n/* Mobile menu */\n@media (max-width: 768px) {\n  .nav-menu {\n    position: fixed;\n    left: -100%;\n    top: 70px;\n    flex-direction: column;\n    background-color: #2c3e50;\n    width: 100%;\n    text-align: center;\n    transition: 0.3s;\n    padding: 2rem 0;\n  }\n  \n  .nav-menu.active {\n    left: 0;\n  }\n}\n```\n\n### 6. Card Grid with Flexbox\n\n```css\n.card-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5rem;\n  padding: 2rem;\n}\n\n.card {\n  flex: 1 1 300px; /* Grow, shrink, min-width 300px */\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n  transition: transform 0.3s;\n}\n\n.card:hover {\n  transform: translateY(-4px);\n}\n\n.card-image {\n  height: 200px;\n  object-fit: cover;\n}\n\n.card-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 1.5rem;\n}\n\n.card-title {\n  margin: 0 0 0.5rem;\n  font-size: 1.25rem;\n}\n\n.card-description {\n  flex: 1;\n  color: #666;\n  line-height: 1.6;\n}\n\n.card-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #eee;\n}\n```\n\n## Flexbox vs Grid\n\nUse Flexbox when:\n- Working with one-dimensional layouts\n- Content size should determine layout\n- You need alignment and distribution of space\n- Building navigation bars, toolbars, or small components\n\nUse Grid when:\n- Working with two-dimensional layouts\n- You need precise control over rows and columns\n- Building complex page layouts\n- You want to overlap items\n\n## Browser Support and Prefixes\n\nModern browsers fully support Flexbox, but for older browsers:\n\n```css\n.container {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  \n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n```\n\nFlexbox has become an essential tool for modern web development. Master these concepts, and you'll be able to create flexible, responsive layouts with ease!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:02.018Z",
    "updated_at": "2025-08-06T15:14:02.018Z",
    "published_at": "2025-08-06T15:14:01.834Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 3,
    "slug": "css-container-queries",
    "title": "CSS Container Queries: The Future of Responsive Components",
    "excerpt": "Learn how CSS Container Queries enable truly responsive components. Create layouts that adapt based on container size, not just viewport.",
    "content": "\nCSS Container Queries are a game-changer for responsive design. Unlike media queries that respond to viewport size, container queries allow components to adapt based on their container's size, enabling truly modular and reusable components.\n\n## Understanding Container Queries\n\nContainer queries solve a fundamental limitation of media queries: components that need to work in different contexts (sidebar, main content, modal) can now adapt to their immediate container rather than the viewport.\n\n### Basic Syntax\n\n```css\n/* Define a container */\n.card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n/* Query the container */\n@container (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 150px 1fr;\n    gap: 1rem;\n  }\n}\n\n/* Named container query */\n@container card (min-width: 400px) {\n  .card-title {\n    font-size: 1.5rem;\n  }\n}\n```\n\n## Container Types\n\n### 1. Inline-Size Container\n\n```css\n.container {\n  container-type: inline-size;\n  /* Queries can check width (inline-size) */\n}\n```\n\n### 2. Size Container\n\n```css\n.container {\n  container-type: size;\n  /* Queries can check both width and height */\n  /* Note: This may affect layout */\n}\n```\n\n### 3. Normal Container (Default)\n\n```css\n.container {\n  container-type: normal;\n  /* Only style queries allowed, no size queries */\n}\n```\n\n## Container Query Units\n\nNew viewport-relative units for container queries:\n\n```css\n.element {\n  /* Container query units */\n  width: 50cqw;  /* 50% of container query width */\n  height: 80cqh; /* 80% of container query height */\n  \n  /* Logical units */\n  padding: 2cqi; /* 2% of container query inline size */\n  margin: 1cqb;  /* 1% of container query block size */\n  \n  /* Smallest/largest dimensions */\n  font-size: 5cqmin; /* 5% of container's smaller dimension */\n  gap: 2cqmax;       /* 2% of container's larger dimension */\n}\n```\n\n## Practical Examples\n\n### 1. Responsive Card Component\n\n```css\n/* Card that adapts to its container */\n.card-wrapper {\n  container-type: inline-size;\n  container-name: card-container;\n}\n\n.card {\n  background: white;\n  border-radius: 8px;\n  padding: 1rem;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n/* Small container: Stacked layout */\n@container card-container (max-width: 399px) {\n  .card {\n    text-align: center;\n  }\n  \n  .card-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 8px;\n  }\n  \n  .card-content {\n    margin-top: 1rem;\n  }\n  \n  .card-title {\n    font-size: 1.25rem;\n  }\n}\n\n/* Medium container: Side-by-side layout */\n@container card-container (min-width: 400px) and (max-width: 599px) {\n  .card {\n    display: grid;\n    grid-template-columns: 150px 1fr;\n    gap: 1rem;\n    align-items: start;\n  }\n  \n  .card-image {\n    width: 100%;\n    height: 150px;\n    object-fit: cover;\n    border-radius: 8px;\n  }\n  \n  .card-title {\n    font-size: 1.375rem;\n  }\n}\n\n/* Large container: Enhanced layout */\n@container card-container (min-width: 600px) {\n  .card {\n    display: grid;\n    grid-template-columns: 200px 1fr;\n    gap: 1.5rem;\n  }\n  \n  .card-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 8px;\n  }\n  \n  .card-title {\n    font-size: 1.75rem;\n    margin-bottom: 0.5rem;\n  }\n  \n  .card-description {\n    font-size: 1.125rem;\n    line-height: 1.6;\n  }\n  \n  .card-actions {\n    margin-top: 1rem;\n    display: flex;\n    gap: 1rem;\n  }\n}\n```\n\n### 2. Responsive Navigation\n\n```css\n.nav-container {\n  container-type: inline-size;\n  container-name: navigation;\n}\n\n.nav {\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  background: #2c3e50;\n}\n\n.nav-items {\n  display: flex;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/* Mobile: Hamburger menu */\n@container navigation (max-width: 599px) {\n  .nav-items {\n    display: none;\n  }\n  \n  .nav-toggle {\n    display: block;\n    margin-left: auto;\n  }\n  \n  .nav-items.active {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: #2c3e50;\n    padding: 1rem;\n  }\n}\n\n/* Desktop: Full navigation */\n@container navigation (min-width: 600px) {\n  .nav-toggle {\n    display: none;\n  }\n  \n  .nav-items {\n    gap: 2rem;\n    margin-left: auto;\n  }\n  \n  .nav-item a {\n    color: white;\n    text-decoration: none;\n    font-size: 1rem;\n    transition: opacity 0.3s;\n  }\n  \n  .nav-item a:hover {\n    opacity: 0.8;\n  }\n}\n```\n\n### 3. Adaptive Grid Layout\n\n```css\n.grid-container {\n  container-type: inline-size;\n  container-name: grid;\n}\n\n.grid {\n  display: grid;\n  gap: 1rem;\n}\n\n/* Responsive grid based on container width */\n@container grid (max-width: 499px) {\n  .grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n@container grid (min-width: 500px) and (max-width: 799px) {\n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@container grid (min-width: 800px) and (max-width: 1199px) {\n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@container grid (min-width: 1200px) {\n  .grid {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n```\n\n### 4. Article Layout\n\n```css\n.article-container {\n  container-type: inline-size;\n  container-name: article;\n}\n\n.article {\n  padding: 2rem;\n}\n\n/* Narrow container: Mobile-optimized */\n@container article (max-width: 599px) {\n  .article-header {\n    text-align: center;\n  }\n  \n  .article-title {\n    font-size: clamp(1.5rem, 5cqw, 2rem);\n    line-height: 1.2;\n  }\n  \n  .article-meta {\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n  }\n  \n  .article-content {\n    font-size: 1rem;\n    line-height: 1.7;\n  }\n  \n  .article-image {\n    width: 100%;\n    margin: 1rem 0;\n  }\n}\n\n/* Wide container: Desktop-optimized */\n@container article (min-width: 600px) {\n  .article-title {\n    font-size: clamp(2rem, 4cqw, 3rem);\n  }\n  \n  .article-meta {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .article-content {\n    font-size: 1.125rem;\n    line-height: 1.8;\n    max-width: 65ch;\n    margin: 0 auto;\n  }\n  \n  .article-image {\n    float: left;\n    width: 40%;\n    margin: 0 2rem 1rem 0;\n  }\n}\n```\n\n## Advanced Techniques\n\n### 1. Combining with CSS Variables\n\n```css\n.dynamic-container {\n  container-type: inline-size;\n  --container-padding: clamp(1rem, 3cqw, 3rem);\n  --font-scale: clamp(0.875, 0.5cqw, 1.25);\n}\n\n@container (min-width: 400px) {\n  .dynamic-content {\n    padding: var(--container-padding);\n    font-size: calc(1rem * var(--font-scale));\n  }\n}\n```\n\n### 2. Container Query with Aspect Ratio\n\n```css\n.aspect-container {\n  container-type: size;\n  aspect-ratio: 16 / 9;\n}\n\n@container (aspect-ratio > 1) {\n  .content {\n    /* Landscape layout */\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@container (aspect-ratio <= 1) {\n  .content {\n    /* Portrait layout */\n    display: flex;\n    flex-direction: column;\n  }\n}\n```\n\n### 3. Nested Container Queries\n\n```css\n.outer-container {\n  container-type: inline-size;\n  container-name: outer;\n}\n\n.inner-container {\n  container-type: inline-size;\n  container-name: inner;\n}\n\n/* Query outer container */\n@container outer (min-width: 800px) {\n  .outer-content {\n    display: grid;\n    grid-template-columns: 300px 1fr;\n  }\n}\n\n/* Query inner container */\n@container inner (min-width: 400px) {\n  .inner-content {\n    columns: 2;\n    gap: 2rem;\n  }\n}\n```\n\n### 4. Style Queries (Future)\n\n```css\n/* Note: Style queries are still experimental */\n@container style(--theme: dark) {\n  .component {\n    background: #1a1a1a;\n    color: white;\n  }\n}\n\n@container style(--layout: compact) {\n  .component {\n    padding: 0.5rem;\n    font-size: 0.875rem;\n  }\n}\n```\n\n## Real-World Component Library\n\n```css\n/* Base container setup */\n.component-container {\n  container-type: inline-size;\n}\n\n/* Button component */\n@container (max-width: 199px) {\n  .btn {\n    padding: 0.5rem 1rem;\n    font-size: 0.875rem;\n  }\n  \n  .btn-group {\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .btn-group .btn {\n    width: 100%;\n  }\n}\n\n@container (min-width: 200px) {\n  .btn {\n    padding: 0.625rem 1.25rem;\n    font-size: 1rem;\n  }\n  \n  .btn-group {\n    display: flex;\n    gap: 0.5rem;\n  }\n}\n\n/* Form component */\n@container (max-width: 399px) {\n  .form-group {\n    margin-bottom: 1rem;\n  }\n  \n  .form-label {\n    display: block;\n    margin-bottom: 0.25rem;\n  }\n  \n  .form-input {\n    width: 100%;\n    padding: 0.5rem;\n  }\n}\n\n@container (min-width: 400px) {\n  .form-group {\n    display: grid;\n    grid-template-columns: 150px 1fr;\n    gap: 1rem;\n    align-items: center;\n    margin-bottom: 1.5rem;\n  }\n  \n  .form-label {\n    text-align: right;\n  }\n  \n  .form-input {\n    padding: 0.625rem;\n  }\n}\n\n/* Data table component */\n.table-container {\n  container-type: inline-size;\n  overflow-x: auto;\n}\n\n@container (max-width: 599px) {\n  .data-table {\n    font-size: 0.875rem;\n  }\n  \n  .data-table th,\n  .data-table td {\n    padding: 0.5rem;\n  }\n  \n  /* Hide less important columns */\n  .data-table .optional {\n    display: none;\n  }\n}\n\n@container (min-width: 600px) {\n  .data-table {\n    font-size: 1rem;\n  }\n  \n  .data-table th,\n  .data-table td {\n    padding: 0.75rem 1rem;\n  }\n  \n  .data-table .optional {\n    display: table-cell;\n  }\n}\n```\n\n## Browser Support & Fallbacks\n\n```css\n/* Feature detection */\n@supports (container-type: inline-size) {\n  .container {\n    container-type: inline-size;\n  }\n}\n\n/* Fallback for older browsers */\n@supports not (container-type: inline-size) {\n  /* Use traditional media queries */\n  @media (min-width: 768px) {\n    .component {\n      /* Desktop styles */\n    }\n  }\n}\n```\n\n## Best Practices\n\n1. **Name your containers**: Use descriptive container names for clarity\n2. **Start with inline-size**: Most use cases only need width queries\n3. **Avoid size type when possible**: It can affect layout calculations\n4. **Use container units wisely**: They're powerful but can be confusing\n5. **Progressive enhancement**: Always provide fallbacks\n6. **Test in context**: Components should work in various container sizes\n\nContainer queries represent a paradigm shift in responsive design, enabling truly modular components that adapt intelligently to their environment. Master them to build more flexible and maintainable component systems!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:01.407Z",
    "updated_at": "2025-08-06T15:14:01.407Z",
    "published_at": "2025-08-06T15:14:01.224Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 2,
    "slug": "css-animations",
    "title": "CSS Animations: From Basics to Advanced Techniques",
    "excerpt": "Learn how to create stunning animations with CSS. From simple transitions to complex keyframe animations, performance optimization, and real-world examples.",
    "content": "\nCSS animations bring life to web interfaces, creating engaging user experiences without JavaScript. This guide covers everything from basic transitions to advanced animation techniques.\n\n## CSS Transitions\n\nTransitions are the simplest form of CSS animation, perfect for hover effects and state changes.\n\n### Basic Transition Syntax\n\n```css\n.button {\n  background: #3498db;\n  color: white;\n  padding: 10px 20px;\n  transition: background 0.3s ease;\n}\n\n.button:hover {\n  background: #2980b9;\n}\n\n/* Multiple properties */\n.card {\n  transform: translateY(0);\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 20px rgba(0,0,0,0.2);\n}\n```\n\n### Transition Properties\n\n```css\n.element {\n  /* Shorthand */\n  transition: property duration timing-function delay;\n  \n  /* Individual properties */\n  transition-property: transform, opacity;\n  transition-duration: 0.3s, 0.5s;\n  transition-timing-function: ease-in-out, linear;\n  transition-delay: 0s, 0.1s;\n}\n```\n\n### Timing Functions\n\n```css\n.examples {\n  /* Predefined */\n  transition-timing-function: ease;        /* slow-fast-slow */\n  transition-timing-function: linear;      /* constant speed */\n  transition-timing-function: ease-in;     /* slow start */\n  transition-timing-function: ease-out;    /* slow end */\n  transition-timing-function: ease-in-out; /* slow start and end */\n  \n  /* Custom cubic-bezier */\n  transition-timing-function: cubic-bezier(0.68, -0.55, 0.265, 1.55); /* Bounce effect */\n  \n  /* Steps */\n  transition-timing-function: steps(4, end);\n}\n```\n\n## CSS Keyframe Animations\n\nKeyframe animations offer more control for complex animations.\n\n### Basic @keyframes\n\n```css\n@keyframes slide-in {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.element {\n  animation: slide-in 0.5s ease-out;\n}\n```\n\n### Multiple Keyframes\n\n```css\n@keyframes bounce {\n  0% {\n    transform: translateY(0);\n  }\n  25% {\n    transform: translateY(-20px);\n  }\n  50% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n\n.bouncing-element {\n  animation: bounce 1s ease-in-out infinite;\n}\n```\n\n### Animation Properties\n\n```css\n.element {\n  /* Shorthand */\n  animation: name duration timing-function delay iteration-count direction fill-mode play-state;\n  \n  /* Individual properties */\n  animation-name: slide-in;\n  animation-duration: 1s;\n  animation-timing-function: ease-out;\n  animation-delay: 0.5s;\n  animation-iteration-count: infinite; /* or number */\n  animation-direction: alternate; /* normal, reverse, alternate, alternate-reverse */\n  animation-fill-mode: forwards; /* none, forwards, backwards, both */\n  animation-play-state: running; /* running, paused */\n}\n```\n\n## Practical Animation Examples\n\n### 1. Loading Spinner\n\n```css\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n```\n\n### 2. Pulse Effect\n\n```css\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.1);\n    opacity: 0.7;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.pulse-button {\n  background: #e74c3c;\n  color: white;\n  padding: 15px 30px;\n  border: none;\n  border-radius: 50px;\n  cursor: pointer;\n  animation: pulse 2s ease-in-out infinite;\n}\n```\n\n### 3. Text Animation\n\n```css\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n@keyframes blink {\n  50% {\n    border-color: transparent;\n  }\n}\n\n.typewriter {\n  font-family: monospace;\n  overflow: hidden;\n  border-right: 3px solid;\n  white-space: nowrap;\n  animation: \n    typing 3.5s steps(40, end),\n    blink 0.75s step-end infinite;\n}\n```\n\n### 4. Card Flip Animation\n\n```css\n.flip-card {\n  width: 300px;\n  height: 200px;\n  perspective: 1000px;\n}\n\n.flip-card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n}\n\n.flip-card:hover .flip-card-inner {\n  transform: rotateY(180deg);\n}\n\n.flip-card-front, .flip-card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: 10px;\n}\n\n.flip-card-front {\n  background: #3498db;\n  color: white;\n}\n\n.flip-card-back {\n  background: #2ecc71;\n  color: white;\n  transform: rotateY(180deg);\n}\n```\n\n### 5. Staggered Animation\n\n```css\n@keyframes fade-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.stagger-container .item {\n  opacity: 0;\n  animation: fade-in-up 0.5s ease forwards;\n}\n\n.stagger-container .item:nth-child(1) { animation-delay: 0.1s; }\n.stagger-container .item:nth-child(2) { animation-delay: 0.2s; }\n.stagger-container .item:nth-child(3) { animation-delay: 0.3s; }\n.stagger-container .item:nth-child(4) { animation-delay: 0.4s; }\n\n/* Or use CSS custom properties for dynamic delays */\n.stagger-container .item {\n  animation-delay: calc(var(--i) * 0.1s);\n}\n```\n\n### 6. Morphing Shape\n\n```css\n@keyframes morph {\n  0% {\n    border-radius: 50%;\n    background: #3498db;\n    transform: rotate(0deg);\n  }\n  50% {\n    border-radius: 0%;\n    background: #e74c3c;\n    transform: rotate(180deg) scale(0.5);\n  }\n  100% {\n    border-radius: 50%;\n    background: #3498db;\n    transform: rotate(360deg) scale(1);\n  }\n}\n\n.morph-shape {\n  width: 100px;\n  height: 100px;\n  animation: morph 4s ease-in-out infinite;\n}\n```\n\n## Advanced Techniques\n\n### 1. Animation with CSS Variables\n\n```css\n.dynamic-animation {\n  --rotation: 0deg;\n  --scale: 1;\n  transform: rotate(var(--rotation)) scale(var(--scale));\n  transition: transform 0.3s ease;\n}\n\n/* Update via JavaScript */\nelement.style.setProperty('--rotation', '180deg');\nelement.style.setProperty('--scale', '1.5');\n```\n\n### 2. Scroll-Triggered Animations\n\n```css\n@keyframes slide-in-left {\n  from {\n    opacity: 0;\n    transform: translateX(-100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.scroll-element {\n  opacity: 0;\n}\n\n.scroll-element.visible {\n  animation: slide-in-left 0.6s ease forwards;\n}\n\n/* Intersection Observer in JavaScript triggers .visible class */\n```\n\n### 3. SVG Path Animation\n\n```css\n.path {\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 1000;\n  animation: draw 2s ease forwards;\n}\n\n@keyframes draw {\n  to {\n    stroke-dashoffset: 0;\n  }\n}\n```\n\n## Performance Optimization\n\n### 1. Use Transform and Opacity\n\n```css\n/* Good - GPU accelerated */\n.optimized {\n  transform: translateX(100px);\n  opacity: 0.5;\n}\n\n/* Avoid - Triggers layout */\n.not-optimized {\n  left: 100px;\n  width: 200px;\n}\n```\n\n### 2. Will-Change Property\n\n```css\n.will-animate {\n  will-change: transform, opacity;\n}\n\n/* Remove after animation */\n.animation-done {\n  will-change: auto;\n}\n```\n\n### 3. Reduce Paint Areas\n\n```css\n/* Isolate animations */\n.animated-element {\n  will-change: transform;\n  transform: translateZ(0); /* Create new layer */\n}\n```\n\n## Animation Best Practices\n\n1. **Keep it subtle**: Animations should enhance, not distract\n2. **Respect motion preferences**: \n   ```css\n   @media (prefers-reduced-motion: reduce) {\n     * {\n       animation-duration: 0.01ms !important;\n       animation-iteration-count: 1 !important;\n       transition-duration: 0.01ms !important;\n     }\n   }\n   ```\n3. **Test performance**: Use DevTools to check for dropped frames\n4. **Use appropriate durations**: \n   - Micro-interactions: 100-300ms\n   - Page transitions: 300-500ms\n   - Complex animations: 500-1000ms\n5. **Provide feedback**: Ensure animations communicate state changes\n\n## Debugging Animations\n\n```css\n/* Slow down all animations for debugging */\n* {\n  animation-duration: 10s !important;\n  transition-duration: 10s !important;\n}\n```\n\nCSS animations are powerful tools for creating engaging web experiences. Use them wisely to enhance usability and delight your users!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:14:00.828Z",
    "updated_at": "2025-08-06T15:14:00.828Z",
    "published_at": "2025-08-06T15:14:00.189Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  },
  {
    "id": 1,
    "slug": "welcome-to-my-blog",
    "title": "Welcome to My Blog",
    "excerpt": "This is my first blog post using the new database system.",
    "content": "# Welcome to My Blog\n\nThis is my first blog post using the new PostgreSQL database powered by Neon.\n\n## Features\n\n- **Database-driven content**: All blog posts are now stored in a PostgreSQL database\n- **Rich content support**: Write posts in Markdown with full syntax support\n- **Multi-author support**: Each post can have multiple authors\n- **Internationalization**: Posts can be created in different languages\n\n## Code Example\n\nHere's a simple code example:\n\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('World'));\n```\n\n## What's Next?\n\nStay tuned for more posts about web development, React, TypeScript, and more!",
    "cover_image": "/images/avatar.jpeg",
    "published": true,
    "locale": "en",
    "created_at": "2025-08-06T15:09:16.902Z",
    "updated_at": "2025-08-06T15:09:16.902Z",
    "published_at": "2025-08-06T15:09:16.244Z",
    "authors": [
      {
        "bio": "Fullstack Developer passionate about modern web technologies and creating exceptional user experiences.",
        "name": "Dmitry Borisenko",
        "email": "hello@goosen.pro",
        "picture": "/images/avatar.jpeg"
      }
    ]
  }
]