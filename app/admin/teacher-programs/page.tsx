'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { Separator } from '@/components/ui/separator'
import { toast } from 'sonner'
import {
	Users,
	BookOpen,
	Plus,
	Trash2,
	RefreshCw,
	AlertCircle,
	CheckCircle,
	Copy,
	Play,
	User
} from 'lucide-react'

interface Program {
	id: number
	title: string
	description?: string
}

interface Teacher {
	id: number
	name: string
	email?: string
	programs: Program[]
}

export default function TeacherProgramsAdminPage() {
	const [apiUrl, setApiUrl] = useState('http://localhost:1337')
	const [teacherId, setTeacherId] = useState(1)
	const [programs, setPrograms] = useState<Program[]>([])
	const [teachers, setTeachers] = useState<Teacher[]>([])
	const [selectedTeacher, setSelectedTeacher] = useState<Teacher | null>(null)
	const [loading, setLoading] = useState(false)
	const [logs, setLogs] = useState<string[]>([])

	// –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
	const addLog = (message: string) => {
		const timestamp = new Date().toLocaleTimeString()
		setLogs(prev => [...prev, `[${timestamp}] ${message}`])
	}

	// –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
	const clearLogs = () => {
		setLogs([])
	}

	// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π pagination)
	const fetchPrograms = async () => {
		try {
			addLog('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º...')

			// –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
			const response = await fetch(`${apiUrl}/products`)

			if (!response.ok) {
				throw new Error(`HTTP ${response.status}: ${response.statusText}`)
			}

			let programs = await response.json()

			// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–≤–Ω–æ 100 –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ (pagination)
			if (programs.length === 100) {
				addLog(
					`üìÑ –ü–æ–ª—É—á–µ–Ω–æ ${programs.length} –ø—Ä–æ–≥—Ä–∞–º–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é...`
				)

				// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ pagination
				try {
					const paginatedResponse = await fetch(
						`${apiUrl}/products?_limit=1000`
					)
					if (paginatedResponse.ok) {
						const allPrograms = await paginatedResponse.json()
						if (allPrograms.length > programs.length) {
							programs = allPrograms
							addLog(`üìÑ –ß–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ ${programs.length} –ø—Ä–æ–≥—Ä–∞–º–º`)
						}
					}
				} catch (paginationError) {
					addLog(
						`‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º ${programs.length} –ø—Ä–æ–≥—Ä–∞–º–º`
					)
				}
			}

			setPrograms(programs)
			addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: ${programs.length}`)

			return programs
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Unknown error'
			addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º: ${errorMsg}`)
			toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º')
			return []
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π pagination)
	const fetchTeachers = async () => {
		try {
			addLog('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...')

			// –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
			const response = await fetch(`${apiUrl}/teachers`)

			if (!response.ok) {
				throw new Error(`HTTP ${response.status}: ${response.statusText}`)
			}

			let teachers = await response.json()

			// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–≤–Ω–æ 100 –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ (pagination)
			if (teachers.length === 100) {
				addLog(
					`üìÑ –ü–æ–ª—É—á–µ–Ω–æ ${teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é...`
				)

				// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ pagination
				try {
					const paginatedResponse = await fetch(
						`${apiUrl}/teachers?_limit=1000`
					)
					if (paginatedResponse.ok) {
						const allTeachers = await paginatedResponse.json()
						if (allTeachers.length > teachers.length) {
							teachers = allTeachers
							addLog(
								`üìÑ –ß–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ ${teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π`
							)
						}
					}
				} catch (paginationError) {
					addLog(
						`‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º ${teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π`
					)
				}
			}

			setTeachers(teachers)
			addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${teachers.length}`)

			return teachers
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Unknown error'
			addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${errorMsg}`)
			toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π')
			return []
		}
	}

	// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	const fetchTeacher = async (id: number) => {
		try {
			addLog(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${id}...`)

			// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
			const teacherFromList = teachers.find(t => t.id === id)
			if (teacherFromList) {
				setSelectedTeacher(teacherFromList)
				addLog(
					`‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ: ${teacherFromList.name} (–ø—Ä–æ–≥—Ä–∞–º–º: ${teacherFromList.programs?.length || 0})`
				)
				return teacherFromList
			}

			// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º API –∑–∞–ø—Ä–æ—Å
			const response = await fetch(`${apiUrl}/teachers/${id}`)

			if (!response.ok) {
				// –ï—Å–ª–∏ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ ID, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞–π—Ç–∏ —Ç–∞–º
				addLog(
					`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ API (${response.status}), –∏—â–µ–º –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ...`
				)
				const updatedTeachers = await fetchTeachers()
				const teacher = updatedTeachers.find((t: Teacher) => t.id === id)

				if (teacher) {
					setSelectedTeacher(teacher)
					addLog(
						`‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ: ${teacher.name} (–ø—Ä–æ–≥—Ä–∞–º–º: ${teacher.programs?.length || 0})`
					)
					return teacher
				} else {
					throw new Error(`–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
				}
			}

			const teacher = await response.json()
			setSelectedTeacher(teacher)
			addLog(
				`‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${teacher.name} (–ø—Ä–æ–≥—Ä–∞–º–º: ${teacher.programs?.length || 0})`
			)

			return teacher
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Unknown error'
			addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${errorMsg}`)
			toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
			return null
		}
	}

	// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫–æ –≤—Å–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
	const addTeacherToAllPrograms = async () => {
		if (!teacherId) {
			toast.error('–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
			return
		}

		setLoading(true)

		try {
			// 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
			const programs = await fetchPrograms()
			if (programs.length === 0) {
				addLog('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
				return
			}

			const programIds = programs.map((program: Program) => program.id)

			// 2. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			addLog(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId}...`)
			const updateResponse = await fetch(`${apiUrl}/teachers/${teacherId}`, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					programs: programIds
				})
			})

			const result = await updateResponse.json()

			if (updateResponse.ok) {
				addLog(
					`‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ${result.programs?.length || programIds.length} –ø—Ä–æ–≥—Ä–∞–º–º–∞–º`
				)
				toast.success('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ –≤—Å–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º!')

				// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
				await fetchTeachers() // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
				await fetchTeacher(teacherId) // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			} else {
				throw new Error(JSON.stringify(result))
			}
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Unknown error'
			addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${errorMsg}`)
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
		} finally {
			setLoading(false)
		}
	}

	// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	const removeAllPrograms = async () => {
		if (!teacherId) {
			toast.error('–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
			return
		}

		setLoading(true)

		try {
			addLog(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId}...`)
			const updateResponse = await fetch(`${apiUrl}/teachers/${teacherId}`, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					programs: []
				})
			})

			const result = await updateResponse.json()

			if (updateResponse.ok) {
				addLog('‚úÖ –í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–¥–∞–ª–µ–Ω—ã!')
				toast.success('–í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–¥–∞–ª–µ–Ω—ã —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')

				// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
				await fetchTeachers() // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
				await fetchTeacher(teacherId) // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			} else {
				throw new Error(JSON.stringify(result))
			}
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Unknown error'
			addLog(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${errorMsg}`)
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º')
		} finally {
			setLoading(false)
		}
	}

	// –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
	const refreshAllData = async () => {
		setLoading(true)
		addLog('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...')

		try {
			await Promise.all([fetchPrograms(), fetchTeachers()])

			// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
			if (teacherId) {
				await fetchTeacher(teacherId)
			}

			addLog('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
			toast.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
		} catch (error) {
			addLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
			toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
		} finally {
			setLoading(false)
		}
	}

	// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
	const copyScript = () => {
		const script = `
// –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const teacherId = ${teacherId}; // ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
const apiUrl = '${apiUrl}';

async function addTeacherToAllPrograms() {
  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º...');
    const programsResponse = await fetch(\`\${apiUrl}/products\`);
    const programs = await programsResponse.json();

    console.log(\`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: \${programs.length}\`);
    const programIds = programs.map(program => program.id);

    // 2. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    console.log(\`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \${teacherId}...\`);
    const updateResponse = await fetch(\`\${apiUrl}/teachers/\${teacherId}\`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        programs: programIds
      })
    });

    const result = await updateResponse.json();

    if (updateResponse.ok) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
      console.log(\`–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ \${result.programs.length} –ø—Ä–æ–≥—Ä–∞–º–º–∞–º\`);
      window.location.reload();
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', result);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

addTeacherToAllPrograms();
`.trim()

		navigator.clipboard.writeText(script)
		toast.success('–°–∫—Ä–∏–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')
	}

	// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	useEffect(() => {
		if (teacherId) {
			fetchTeacher(teacherId)
		}
	}, [teacherId, apiUrl])

	// –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
	useEffect(() => {
		fetchPrograms()
		fetchTeachers()
	}, [apiUrl])

	return (
		<div className='min-h-screen bg-background p-6'>
			<div className='max-w-6xl mx-auto space-y-6'>
				{/* Header */}
				<div className='text-center space-y-2'>
					<h1 className='text-3xl font-bold flex items-center justify-center gap-2'>
						<Users className='w-8 h-8 text-blue-600' />
						–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
					</h1>
					<p className='text-muted-foreground'>
						–°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
					</p>
				</div>

				<div className='grid lg:grid-cols-2 gap-6'>
					{/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
					<Card>
						<CardHeader>
							<CardTitle className='flex items-center gap-2'>
								<AlertCircle className='w-5 h-5 text-orange-500' />
								–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
							</CardTitle>
						</CardHeader>
						<CardContent className='space-y-4'>
							<div className='space-y-2'>
								<Label htmlFor='apiUrl'>API URL</Label>
								<Input
									id='apiUrl'
									value={apiUrl}
									onChange={e => setApiUrl(e.target.value)}
									placeholder='http://localhost:1337'
								/>
							</div>

							<div className='space-y-2'>
								<Label htmlFor='teacherId'>ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</Label>
								<Input
									id='teacherId'
									type='number'
									value={teacherId}
									onChange={e => setTeacherId(Number(e.target.value))}
									min='1'
								/>
							</div>

							<Separator />

							{/* –î–µ–π—Å—Ç–≤–∏—è */}
							<div className='space-y-3'>
								<Button
									onClick={addTeacherToAllPrograms}
									disabled={loading}
									className='w-full bg-green-600 hover:bg-green-700'
								>
									{loading ? (
										<RefreshCw className='w-4 h-4 mr-2 animate-spin' />
									) : (
										<Plus className='w-4 h-4 mr-2' />
									)}
									–î–æ–±–∞–≤–∏—Ç—å –∫–æ –≤—Å–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
								</Button>

								<Button
									onClick={removeAllPrograms}
									disabled={loading}
									variant='destructive'
									className='w-full'
								>
									<Trash2 className='w-4 h-4 mr-2' />
									–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
								</Button>

								<Button
									onClick={refreshAllData}
									disabled={loading}
									variant='outline'
									className='w-full'
								>
									{loading ? (
										<RefreshCw className='w-4 h-4 mr-2 animate-spin' />
									) : (
										<RefreshCw className='w-4 h-4 mr-2' />
									)}
									–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
								</Button>

								<Button
									onClick={copyScript}
									variant='outline'
									className='w-full'
								>
									<Copy className='w-4 h-4 mr-2' />
									–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç
								</Button>
							</div>
						</CardContent>
					</Card>

					{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ */}
					<Card>
						<CardHeader>
							<CardTitle className='flex items-center gap-2'>
								<User className='w-5 h-5 text-blue-500' />
								–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
							</CardTitle>
						</CardHeader>
						<CardContent>
							{selectedTeacher ? (
								<div className='space-y-4'>
									<div>
										<div className='flex items-center gap-2 mb-2'>
											<CheckCircle className='w-4 h-4 text-green-600' />
											<span className='font-semibold'>
												{selectedTeacher.name}
											</span>
										</div>
										{selectedTeacher.email && (
											<p className='text-sm text-muted-foreground'>
												{selectedTeacher.email}
											</p>
										)}
									</div>

									<div>
										<h4 className='font-semibold mb-2 flex items-center gap-2'>
											<BookOpen className='w-4 h-4' />
											–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (
											{selectedTeacher.programs?.length || 0})
										</h4>
										<div className='flex flex-wrap gap-2'>
											{selectedTeacher.programs?.length ? (
												selectedTeacher.programs.map(program => (
													<Badge key={program.id} variant='secondary'>
														{program.title}
													</Badge>
												))
											) : (
												<p className='text-sm text-muted-foreground'>
													–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
												</p>
											)}
										</div>
									</div>
								</div>
							) : (
								<div className='text-center py-8 text-muted-foreground'>
									<User className='w-12 h-12 mx-auto mb-2 opacity-50' />
									<p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
								</div>
							)}
						</CardContent>
					</Card>
				</div>

				{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
				<div className='grid md:grid-cols-3 gap-4'>
					<Card>
						<CardContent className='pt-6'>
							<div className='flex items-center justify-between'>
								<div>
									<p className='text-sm text-muted-foreground'>
										–í—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º
									</p>
									<p className='text-2xl font-bold'>{programs.length}</p>
								</div>
								<BookOpen className='w-8 h-8 text-blue-500 opacity-50' />
							</div>
						</CardContent>
					</Card>

					<Card>
						<CardContent className='pt-6'>
							<div className='flex items-center justify-between'>
								<div>
									<p className='text-sm text-muted-foreground'>
										–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
									</p>
									<p className='text-2xl font-bold'>{teachers.length}</p>
								</div>
								<Users className='w-8 h-8 text-green-500 opacity-50' />
							</div>
						</CardContent>
					</Card>

					<Card>
						<CardContent className='pt-6'>
							<div className='flex items-center justify-between'>
								<div>
									<p className='text-sm text-muted-foreground'>
										–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≥—Ä–∞–º–º
									</p>
									<p className='text-2xl font-bold'>
										{selectedTeacher?.programs?.length || 0}
									</p>
								</div>
								<CheckCircle className='w-8 h-8 text-orange-500 opacity-50' />
							</div>
						</CardContent>
					</Card>
				</div>

				{/* –õ–æ–≥–∏ */}
				<Card>
					<CardHeader>
						<div className='flex items-center justify-between'>
							<CardTitle className='flex items-center gap-2'>
								<Play className='w-5 h-5 text-purple-500' />
								–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
							</CardTitle>
							<Button onClick={clearLogs} variant='outline' size='sm'>
								<Trash2 className='w-4 h-4 mr-1' />
								–û—á–∏—Å—Ç–∏—Ç—å
							</Button>
						</div>
					</CardHeader>
					<CardContent>
						<Textarea
							value={logs.join('\n')}
							readOnly
							className='min-h-[200px] font-mono text-sm bg-muted/30'
							placeholder='–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...'
						/>
					</CardContent>
				</Card>

				{/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π */}
				<Card>
					<CardHeader>
						<CardTitle className='flex items-center gap-2'>
							<Users className='w-5 h-5 text-blue-500' />
							–í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
						</CardTitle>
					</CardHeader>
					<CardContent>
						<div className='space-y-2 max-h-60 overflow-y-auto'>
							{teachers.map(teacher => (
								<div
									key={teacher.id}
									className={`p-3 border rounded-lg cursor-pointer transition-colors ${
										teacher.id === teacherId
											? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20'
											: 'border-border hover:bg-muted/50'
									}`}
									onClick={() => setTeacherId(teacher.id)}
								>
									<div className='flex items-center justify-between'>
										<div>
											<p className='font-semibold'>{teacher.name}</p>
											{teacher.email && (
												<p className='text-sm text-muted-foreground'>
													{teacher.email}
												</p>
											)}
										</div>
										<Badge
											variant={teacher.id === teacherId ? 'default' : 'outline'}
										>
											ID: {teacher.id} ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º:{' '}
											{teacher.programs?.length || 0}
										</Badge>
									</div>
								</div>
							))}
						</div>
					</CardContent>
				</Card>
			</div>
		</div>
	)
}
