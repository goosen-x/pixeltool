#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
})

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ –∏–∑ Lucide React
const AVAILABLE_ICONS = [
	'Globe',
	'Key',
	'Lock',
	'Shield',
	'Search',
	'Calculator',
	'Code',
	'Palette',
	'FileText',
	'Image',
	'Camera',
	'Music',
	'Video',
	'Mail',
	'Phone',
	'Clock',
	'Calendar',
	'Map',
	'Settings',
	'User',
	'Users',
	'Heart',
	'Star',
	'Share',
	'Download',
	'Upload',
	'Save',
	'Edit',
	'Copy',
	'Trash',
	'Archive',
	'Filter',
	'Sort',
	'Zap',
	'Wifi',
	'Bluetooth',
	'Battery',
	'Volume',
	'Play',
	'Pause',
	'Sparkles',
	'Wand',
	'Target',
	'Award',
	'Gift',
	'Briefcase',
	'ShoppingCart',
	'CreditCard',
	'DollarSign',
	'TrendingUp',
	'BarChart',
	'PieChart',
	'Activity',
	'Monitor',
	'Smartphone',
	'Tablet',
	'Laptop',
	'Server',
	'Database',
	'Cloud',
	'Cpu',
	'HardDrive',
	'MemoryStick',
	'Router',
	'Terminal',
	'Code2',
	'FileCode',
	'GitBranch',
	'Package',
	'Layers',
	'Component',
	'Puzzle',
	'Wrench',
	'Hammer'
]

const CATEGORIES = [
	'webdev',
	'business',
	'content',
	'security',
	'multimedia',
	'analytics',
	'lifestyle'
]

const GRADIENTS = [
	'from-blue-500 to-purple-600',
	'from-green-500 to-teal-600',
	'from-orange-500 to-red-600',
	'from-indigo-500 to-blue-600',
	'from-pink-500 to-rose-600',
	'from-purple-500 to-indigo-600',
	'from-cyan-500 to-blue-600',
	'from-emerald-500 to-green-600',
	'from-amber-500 to-orange-600',
	'from-violet-500 to-purple-600'
]

function prompt(question) {
	return new Promise(resolve => {
		rl.question(question, answer => {
			resolve(answer.trim())
		})
	})
}

function toPascalCase(str) {
	return str
		.split(/[-_\s]+/)
		.map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
		.join('')
}

function toCamelCase(str) {
	const pascal = toPascalCase(str)
	return pascal.charAt(0).toLowerCase() + pascal.slice(1)
}

function toKebabCase(str) {
	return str
		.replace(/([a-z])([A-Z])/g, '$1-$2')
		.replace(/[\s_]+/g, '-')
		.toLowerCase()
}

function validateIcon(iconName) {
	if (!AVAILABLE_ICONS.includes(iconName)) {
		console.log(`‚ö†Ô∏è  Icon "${iconName}" not found in Lucide React.`)
		console.log(
			`Available icons: ${AVAILABLE_ICONS.slice(0, 20).join(', ')}...`
		)
		return false
	}
	return true
}

function validateCategory(category) {
	if (!CATEGORIES.includes(category)) {
		console.log(`‚ö†Ô∏è  Category "${category}" not valid.`)
		console.log(`Available categories: ${CATEGORIES.join(', ')}`)
		return false
	}
	return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ JSON
function addTranslationToJson(filePath, translationKey, translations) {
	const content = fs.readFileSync(filePath, 'utf8')
	const json = JSON.parse(content)

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ–∫—Ü–∏—è widgets —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if (!json.widgets) {
		json.widgets = {}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–∫—Ü–∏—é widgets
	json.widgets[translationKey] = translations

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	fs.writeFileSync(filePath, JSON.stringify(json, null, '\t') + '\n')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ –≤ widgets.ts –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
function addToWidgetsConfig(
	widgetId,
	translationKey,
	iconName,
	category,
	tags,
	gradient
) {
	try {
		const widgetsPath = path.join(
			process.cwd(),
			'lib',
			'constants',
			'widgets.ts'
		)
		let content = fs.readFileSync(widgetsPath, 'utf8')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (content.includes(`id: '${widgetId}'`)) {
			console.log(`‚ö†Ô∏è  Widget "${widgetId}" already exists in widgets.ts`)
			return false
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		const iconImportRegex =
			/import\s*{\s*([^}]+)\s*}\s*from\s*['"]lucide-react['"]/
		const iconImportMatch = content.match(iconImportRegex)

		if (iconImportMatch) {
			const existingIcons = iconImportMatch[1].split(',').map(i => i.trim())
			if (!existingIcons.includes(iconName)) {
				const newImports = [...existingIcons, iconName].sort().join(', ')
				content = content.replace(
					iconImportMatch[0],
					`import { ${newImports} } from 'lucide-react'`
				)
			}
		}

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤–∏–¥–∂–µ—Ç–∞
		const widgetEntry = `\t{
\t\tid: '${widgetId}',
\t\tpath: '${widgetId}',
\t\ttranslationKey: '${translationKey}',
\t\ticon: ${iconName},
\t\tgradient: '${gradient}',
\t\tcategory: '${category}',
\t\ttags: [${tags.map(tag => `'${tag}'`).join(', ')}],
\t},`

		// –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ widgets - –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ ']' –ø–æ—Å–ª–µ 'export const widgets: Widget[] = ['
		const widgetsArrayStart = content.indexOf(
			'export const widgets: Widget[] = ['
		)
		if (widgetsArrayStart === -1) {
			throw new Error('Could not find widgets array declaration in widgets.ts')
		}

		// –ò—â–µ–º –ø–µ—Ä–≤—É—é ']' –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ widgets, –∏—Å–∫–ª—é—á–∞—è –¥—Ä—É–≥–∏–µ –º–∞—Å—Å–∏–≤—ã
		let arrayEndIndex = -1
		let braceCount = 0
		let insideString = false
		let stringChar = ''

		for (
			let i = widgetsArrayStart + 'export const widgets: Widget[] = ['.length;
			i < content.length;
			i++
		) {
			const char = content[i]

			if (insideString) {
				if (char === stringChar && content[i - 1] !== '\\\\') {
					insideString = false
				}
				continue
			}

			if (char === '"' || char === "'" || char === '`') {
				insideString = true
				stringChar = char
				continue
			}

			if (char === '[' || char === '{') {
				braceCount++
			} else if (char === ']' || char === '}') {
				braceCount--
				if (char === ']' && braceCount === -1) {
					arrayEndIndex = i
					break
				}
			}
		}

		if (arrayEndIndex === -1) {
			throw new Error(
				'Could not find widgets array closing bracket in widgets.ts'
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
		const beforeClosing = content.slice(0, arrayEndIndex).trim()
		const needsComma =
			beforeClosing.endsWith('}') && !beforeClosing.endsWith(',')

		// –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
		const insertion = needsComma ? ',' + widgetEntry + '\n' : widgetEntry + '\n'
		content =
			content.slice(0, arrayEndIndex) + insertion + content.slice(arrayEndIndex)

		fs.writeFileSync(widgetsPath, content)
		return true
	} catch (error) {
		console.error('‚ùå Error adding widget to widgets.ts:', error.message)
		return false
	}
}

async function createWidget() {
	console.log('üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Widget Creator –¥–ª—è PixelTool')
	console.log('==========================================\n')

	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
		const name = await prompt(
			'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Password Generator"): '
		)
		const description = await prompt('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ')

		let category
		do {
			category = await prompt(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è (${CATEGORIES.join('/')}): `)
		} while (!validateCategory(category))

		const tags = await prompt(
			'–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, "password,security,generator"): '
		)

		let iconName
		do {
			iconName = await prompt(
				`–ò–∫–æ–Ω–∫–∞ –∏–∑ lucide-react (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Globe", "Key", "Lock"): `
			)
		} while (!validateIcon(iconName))

		if (!name || !description) {
			console.error('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!')
			rl.close()
			return
		}

		const widgetId = toKebabCase(name)
		const translationKey = toCamelCase(name)
		const pascalName = toPascalCase(name)
		const gradient = GRADIENTS[Math.floor(Math.random() * GRADIENTS.length)]
		const tagsArray = tags
			.split(',')
			.map(tag => tag.trim())
			.filter(Boolean)

		console.log(`\\nüìã –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∂–µ—Ç:`)
		console.log(`   ID: ${widgetId}`)
		console.log(`   Translation Key: ${translationKey}`)
		console.log(`   Component: ${pascalName}`)
		console.log(`   Category: ${category}`)
		console.log(`   Icon: ${iconName}`)
		console.log(`   Gradient: ${gradient}`)

		const confirm = await prompt('\\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ')
		if (confirm.toLowerCase() !== 'y') {
			console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
			rl.close()
			return
		}

		// 1. –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–∏–¥–∂–µ—Ç–∞
		const widgetDir = path.join(
			process.cwd(),
			'app',
			'[locale]',
			'(tools)',
			'tools',
			widgetId
		)
		if (!fs.existsSync(widgetDir)) {
			fs.mkdirSync(widgetDir, { recursive: true })
			console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∏–¥–∂–µ—Ç–∞')
		}

		// 2. –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤–∏–¥–∂–µ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
		const templatePath = path.join(
			process.cwd(),
			'app',
			'[locale]',
			'(tools)',
			'tools',
			'_template',
			'page.tsx'
		)
		let template = fs.readFileSync(templatePath, 'utf8')

		// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
		template = template
			.replace(/template-widget/g, widgetId)
			.replace(/templateWidget/g, translationKey)
			.replace(/TemplateWidget/g, pascalName)
			.replace(/Sparkles/g, iconName)
			.replace(/from-purple-500 to-pink-600/g, gradient)
			.replace(
				/<Sparkles className="w-6 h-6 text-primary" \/>/g,
				`<${iconName} className="w-6 h-6 text-primary" />`
			)
			.replace(
				/<Sparkles className="w-4 h-4 mr-2" \/>/g,
				`<${iconName} className="w-4 h-4 mr-2" />`
			)

		const widgetPath = path.join(widgetDir, 'page.tsx')
		fs.writeFileSync(widgetPath, template)
		console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –≤–∏–¥–∂–µ—Ç–∞')

		// 3. –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤ widgets.ts
		addToWidgetsConfig(
			widgetId,
			translationKey,
			iconName,
			category,
			tagsArray,
			gradient
		)
		console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ widgets.ts')

		// 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
		const enTranslations = {
			title: name,
			description: description,
			useCase: `Use this tool for ${description.toLowerCase()}`,

			inputs: {
				placeholder: 'Enter value...'
			},

			actions: {
				calculate: 'Calculate',
				generate: 'Generate',
				validate: 'Validate',
				convert: 'Convert',
				clear: 'Clear',
				copy: 'Copy Result'
			},

			results: {
				result: 'Result',
				copied: 'Copied to clipboard!'
			},

			validation: {
				required: 'This field is required',
				invalid: 'Invalid input'
			}
		}

		const ruTranslations = {
			title: `${name} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,
			description: `${description} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,
			useCase: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è ${description.toLowerCase()} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,

			inputs: {
				placeholder: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...'
			},

			actions: {
				calculate: '–í—ã—á–∏—Å–ª–∏—Ç—å',
				generate: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
				validate: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
				convert: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
				clear: '–û—á–∏—Å—Ç–∏—Ç—å',
				copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
			},

			results: {
				result: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
				copied: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'
			},

			validation: {
				required: '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
				invalid: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥'
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ JSON
		const enPath = path.join(process.cwd(), 'messages', 'en.json')
		const ruPath = path.join(process.cwd(), 'messages', 'ru.json')

		addTranslationToJson(enPath, translationKey, enTranslations)
		addTranslationToJson(ruPath, translationKey, ruTranslations)
		console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –≤ widgets —Å–µ–∫—Ü–∏—é')

		// 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
		console.log('\\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript —Ç–∏–ø—ã...')
		const { execSync } = require('child_process')
		try {
			execSync('npm run generate:types', { stdio: 'inherit' })
			console.log('‚úÖ –¢–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã')
		} catch (error) {
			console.log(
				'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run generate:types'
			)
		}

		console.log('\\nüéâ –í–∏–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
		console.log('\\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:')
		console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: ${widgetPath}`)
		console.log(`   2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –≤–∏–¥–∂–µ—Ç–∞`)
		console.log(`   3. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ messages/ru.json`)
		console.log(
			`   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–∂–µ—Ç: http://localhost:3000/en/tools/${widgetId}`
		)
		console.log(`   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm run typecheck`)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞:', error.message)
	} finally {
		rl.close()
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
createWidget().catch(console.error)
