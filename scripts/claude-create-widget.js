#!/usr/bin/env node

/**
 * Claude Widget Creator Hook
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Claude Code –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
 * —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞. Claude –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
 * —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/claude-create-widget.js --name "Widget Name" --description "Description" --category webdev --icon Globe --tags "tag1,tag2"
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
const AVAILABLE_ICONS = [
	'Globe',
	'Key',
	'Lock',
	'Shield',
	'Search',
	'Calculator',
	'Code',
	'Palette',
	'FileText',
	'Image',
	'Camera',
	'Music',
	'Video',
	'Mail',
	'Phone',
	'Clock',
	'Calendar',
	'Map',
	'Settings',
	'User',
	'Users',
	'Heart',
	'Star',
	'Share',
	'Download',
	'Upload',
	'Save',
	'Edit',
	'Copy',
	'Trash',
	'Archive',
	'Filter',
	'Sort',
	'Zap',
	'Wifi',
	'Bluetooth',
	'Battery',
	'Volume',
	'Play',
	'Pause',
	'Sparkles',
	'Wand',
	'Target',
	'Award',
	'Gift',
	'Briefcase',
	'ShoppingCart',
	'CreditCard',
	'DollarSign',
	'TrendingUp',
	'BarChart',
	'PieChart',
	'Activity',
	'Monitor',
	'Smartphone',
	'Tablet',
	'Laptop',
	'Server',
	'Database',
	'Cloud',
	'Cpu',
	'HardDrive',
	'MemoryStick',
	'Router',
	'Terminal',
	'Code2',
	'FileCode',
	'GitBranch',
	'Package',
	'Layers',
	'Component',
	'Puzzle',
	'Wrench',
	'Hammer'
]

const CATEGORIES = [
	'webdev',
	'business',
	'content',
	'security',
	'multimedia',
	'analytics',
	'lifestyle'
]

const GRADIENTS = [
	'from-blue-500 to-purple-600',
	'from-green-500 to-teal-600',
	'from-orange-500 to-red-600',
	'from-indigo-500 to-blue-600',
	'from-pink-500 to-rose-600',
	'from-purple-500 to-indigo-600',
	'from-cyan-500 to-blue-600',
	'from-emerald-500 to-green-600',
	'from-amber-500 to-orange-600',
	'from-violet-500 to-purple-600'
]

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
function toPascalCase(str) {
	return str
		.split(/[-_\s]+/)
		.map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
		.join('')
}

function toCamelCase(str) {
	const pascal = toPascalCase(str)
	return pascal.charAt(0).toLowerCase() + pascal.slice(1)
}

function toKebabCase(str) {
	return str
		.replace(/([a-z])([A-Z])/g, '$1-$2')
		.replace(/[\s_]+/g, '-')
		.toLowerCase()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ JSON
function addTranslationToJson(filePath, translationKey, translations) {
	try {
		const content = fs.readFileSync(filePath, 'utf8')
		const json = JSON.parse(content)

		// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ–∫—Ü–∏—è widgets —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (!json.widgets) {
			json.widgets = {}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (json.widgets[translationKey]) {
			console.log(
				`‚ö†Ô∏è  Translation key "${translationKey}" already exists in ${filePath}`
			)
			return false
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–∫—Ü–∏—é widgets
		json.widgets[translationKey] = translations

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Ç–∞–±—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
		fs.writeFileSync(filePath, JSON.stringify(json, null, '\t') + '\n')
		return true
	} catch (error) {
		console.error(`‚ùå Error adding translation to ${filePath}:`, error.message)
		return false
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ –≤ widgets.ts
function addToWidgetsConfig(
	widgetId,
	translationKey,
	iconName,
	category,
	tags,
	gradient
) {
	try {
		const widgetsPath = path.join(
			process.cwd(),
			'lib',
			'constants',
			'widgets.ts'
		)
		let content = fs.readFileSync(widgetsPath, 'utf8')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (content.includes(`id: '${widgetId}'`)) {
			console.log(`‚ö†Ô∏è  Widget "${widgetId}" already exists in widgets.ts`)
			return false
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		const iconImportRegex =
			/import\s*{\s*([^}]+)\s*}\s*from\s*['"]lucide-react['"]/
		const iconImportMatch = content.match(iconImportRegex)

		if (iconImportMatch) {
			const existingIcons = iconImportMatch[1].split(',').map(i => i.trim())
			if (!existingIcons.includes(iconName)) {
				const newImports = [...existingIcons, iconName].sort().join(', ')
				content = content.replace(
					iconImportMatch[0],
					`import { ${newImports} } from 'lucide-react'`
				)
			}
		}

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤–∏–¥–∂–µ—Ç–∞
		const widgetEntry = `\t{
\t\tid: '${widgetId}',
\t\tpath: '${widgetId}',
\t\ttranslationKey: '${translationKey}',
\t\ticon: ${iconName},
\t\tgradient: '${gradient}',
\t\tcategory: '${category}',
\t\ttags: [${tags.map(tag => `'${tag}'`).join(', ')}],
\t},`

		// –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ widgets - –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ ']' –ø–æ—Å–ª–µ 'export const widgets: Widget[] = ['
		const widgetsArrayStart = content.indexOf(
			'export const widgets: Widget[] = ['
		)
		if (widgetsArrayStart === -1) {
			throw new Error('Could not find widgets array declaration in widgets.ts')
		}

		// –ò—â–µ–º –ø–µ—Ä–≤—É—é ']' –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ widgets, –∏—Å–∫–ª—é—á–∞—è –¥—Ä—É–≥–∏–µ –º–∞—Å—Å–∏–≤—ã
		let arrayEndIndex = -1
		let braceCount = 0
		let insideString = false
		let stringChar = ''

		for (
			let i = widgetsArrayStart + 'export const widgets: Widget[] = ['.length;
			i < content.length;
			i++
		) {
			const char = content[i]

			if (insideString) {
				if (char === stringChar && content[i - 1] !== '\\\\') {
					insideString = false
				}
				continue
			}

			if (char === '"' || char === "'" || char === '`') {
				insideString = true
				stringChar = char
				continue
			}

			if (char === '[' || char === '{') {
				braceCount++
			} else if (char === ']' || char === '}') {
				braceCount--
				if (char === ']' && braceCount === -1) {
					arrayEndIndex = i
					break
				}
			}
		}

		if (arrayEndIndex === -1) {
			throw new Error(
				'Could not find widgets array closing bracket in widgets.ts'
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
		const beforeClosing = content.slice(0, arrayEndIndex).trim()
		const needsComma =
			beforeClosing.endsWith('}') && !beforeClosing.endsWith(',')

		// –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
		const insertion = needsComma
			? ',' + widgetEntry + '\\n'
			: widgetEntry + '\\n'
		content =
			content.slice(0, arrayEndIndex) + insertion + content.slice(arrayEndIndex)

		fs.writeFileSync(widgetsPath, content)
		return true
	} catch (error) {
		console.error('‚ùå Error adding widget to widgets.ts:', error.message)
		return false
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–∏–¥–∂–µ—Ç–∞
function createWidgetFile(
	widgetId,
	translationKey,
	pascalName,
	iconName,
	gradient
) {
	try {
		const widgetDir = path.join(
			process.cwd(),
			'app',
			'[locale]',
			'(tools)',
			'tools',
			widgetId
		)
		const widgetPath = path.join(widgetDir, 'page.tsx')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (fs.existsSync(widgetPath)) {
			console.log(`‚ö†Ô∏è  Widget file already exists: ${widgetPath}`)
			return false
		}

		// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
		if (!fs.existsSync(widgetDir)) {
			fs.mkdirSync(widgetDir, { recursive: true })
		}

		// –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
		const templatePath = path.join(
			process.cwd(),
			'app',
			'[locale]',
			'(tools)',
			'tools',
			'_template',
			'page.tsx'
		)
		let template = fs.readFileSync(templatePath, 'utf8')

		// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
		template = template
			.replace(/template-widget/g, widgetId)
			.replace(/templateWidget/g, translationKey)
			.replace(/TemplateWidget/g, pascalName)
			.replace(/Sparkles/g, iconName)
			.replace(/from-purple-500 to-pink-600/g, gradient)
			.replace(
				/<Sparkles className="w-6 h-6 text-primary" \/>/g,
				`<${iconName} className="w-6 h-6 text-primary" />`
			)
			.replace(
				/<Sparkles className="w-4 h-4 mr-2" \/>/g,
				`<${iconName} className="w-4 h-4 mr-2" />`
			)

		fs.writeFileSync(widgetPath, template)
		return widgetPath
	} catch (error) {
		console.error('‚ùå Error creating widget file:', error.message)
		return false
	}
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
async function createWidget(options) {
	const { name, description, category, icon, tags } = options

	console.log('ü§ñ Claude Widget Creator')
	console.log('========================\n')

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if (!name || !description || !category || !icon) {
		console.error(
			'‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --name, --description, --category, --icon'
		)
		process.exit(1)
	}

	if (!CATEGORIES.includes(category)) {
		console.error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`)
		console.error(`–î–æ—Å—Ç—É–ø–Ω—ã–µ: ${CATEGORIES.join(', ')}`)
		process.exit(1)
	}

	if (!AVAILABLE_ICONS.includes(icon)) {
		console.error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∏–∫–æ–Ω–∫–∞: ${icon}`)
		console.error(
			`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∫–æ–Ω–∫–∏: ${AVAILABLE_ICONS.slice(0, 10).join(', ')}...`
		)
		process.exit(1)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	const widgetId = toKebabCase(name)
	const translationKey = toCamelCase(name)
	const pascalName = toPascalCase(name)
	const gradient = GRADIENTS[Math.floor(Math.random() * GRADIENTS.length)]
	const tagsArray = tags
		? tags
				.split(',')
				.map(tag => tag.trim())
				.filter(Boolean)
		: []

	console.log(`üìã –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∂–µ—Ç:`)
	console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`)
	console.log(`   ID: ${widgetId}`)
	console.log(`   Translation Key: ${translationKey}`)
	console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`)
	console.log(`   –ò–∫–æ–Ω–∫–∞: ${icon}`)
	console.log(`   –¢–µ–≥–∏: ${tagsArray.join(', ') || '–Ω–µ—Ç'}`)
	console.log()

	let success = true

	// 1. –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤–∏–¥–∂–µ—Ç–∞
	console.log('üî® –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤–∏–¥–∂–µ—Ç–∞...')
	const widgetPath = createWidgetFile(
		widgetId,
		translationKey,
		pascalName,
		icon,
		gradient
	)
	if (widgetPath) {
		console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${widgetPath}`)
	} else {
		success = false
	}

	// 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ widgets.ts
	console.log('üî® –î–æ–±–∞–≤–ª—è–µ–º –≤ widgets.ts...')
	if (
		addToWidgetsConfig(
			widgetId,
			translationKey,
			icon,
			category,
			tagsArray,
			gradient
		)
	) {
		console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ widgets.ts')
	} else {
		success = false
	}

	// 3. –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–æ–¥—ã
	console.log('üî® –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–æ–¥—ã...')
	const enTranslations = {
		title: name,
		description: description,
		useCase: `Use this tool for ${description.toLowerCase()}`,

		inputs: {
			placeholder: 'Enter value...'
		},

		actions: {
			calculate: 'Calculate',
			generate: 'Generate',
			validate: 'Validate',
			convert: 'Convert',
			clear: 'Clear',
			copy: 'Copy Result'
		},

		results: {
			result: 'Result',
			copied: 'Copied to clipboard!'
		},

		validation: {
			required: 'This field is required',
			invalid: 'Invalid input'
		}
	}

	const ruTranslations = {
		title: `${name} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,
		description: `${description} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,
		useCase: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è ${description.toLowerCase()} (–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥)`,

		inputs: {
			placeholder: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...'
		},

		actions: {
			calculate: '–í—ã—á–∏—Å–ª–∏—Ç—å',
			generate: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
			validate: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
			convert: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
			clear: '–û—á–∏—Å—Ç–∏—Ç—å',
			copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
		},

		results: {
			result: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
			copied: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'
		},

		validation: {
			required: '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
			invalid: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥'
		}
	}

	const enPath = path.join(process.cwd(), 'messages', 'en.json')
	const ruPath = path.join(process.cwd(), 'messages', 'ru.json')

	if (addTranslationToJson(enPath, translationKey, enTranslations)) {
		console.log('‚úÖ EN –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ widgets —Å–µ–∫—Ü–∏—é')
	} else {
		success = false
	}

	if (addTranslationToJson(ruPath, translationKey, ruTranslations)) {
		console.log('‚úÖ RU –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ widgets —Å–µ–∫—Ü–∏—é')
	} else {
		success = false
	}

	// 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
	console.log('üî® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript —Ç–∏–ø—ã...')
	try {
		execSync('npm run generate:types', { stdio: 'pipe' })
		console.log('‚úÖ –¢–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã')
	} catch (error) {
		console.log(
			'‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm run generate:types'
		)
		success = false
	}

	// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript
	console.log('üî® –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript...')
	try {
		execSync('npm run typecheck', { stdio: 'pipe' })
		console.log('‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞')
	} catch (error) {
		console.log('‚ö†Ô∏è  TypeScript –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: npm run typecheck')
		success = false
	}

	// –ò—Ç–æ–≥–∏
	console.log()
	if (success) {
		console.log('üéâ –í–∏–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
		console.log(
			`üìù –§–∞–π–ª –≤–∏–¥–∂–µ—Ç–∞: app/[locale]/(tools)/tools/${widgetId}/page.tsx`
		)
		console.log(`üåê URL: http://localhost:3000/en/tools/${widgetId}`)
		console.log(`üìö –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ messages/ru.json`)
	} else {
		console.log('‚ö†Ô∏è  –í–∏–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.')
	}
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
	const args = {}

	for (let i = 2; i < process.argv.length; i += 2) {
		const key = process.argv[i]?.replace('--', '')
		const value = process.argv[i + 1]

		if (key && value) {
			args[key] = value
		}
	}

	return args
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
	const args = parseArgs()

	if (!args.name) {
		console.log('ü§ñ Claude Widget Creator')
		console.log('========================\n')
		console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
		console.log('  node scripts/claude-create-widget.js \\\\')
		console.log('    --name "Widget Name" \\\\')
		console.log('    --description "Widget description" \\\\')
		console.log('    --category webdev \\\\')
		console.log('    --icon Globe \\\\')
		console.log('    --tags "tag1,tag2,tag3"\n')
		console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${CATEGORIES.join(', ')}`)
		console.log(
			`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∫–æ–Ω–∫–∏: ${AVAILABLE_ICONS.slice(0, 10).join(', ')}...`
		)
		process.exit(1)
	}

	createWidget(args).catch(console.error)
}

module.exports = { createWidget, AVAILABLE_ICONS, CATEGORIES }
